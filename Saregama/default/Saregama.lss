
Saregama.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000025c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  0000025c  000002d0  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000091  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003a1  00000000  00000000  00000381  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000018f  00000000  00000000  00000722  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004a0  00000000  00000000  000008b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00000d54  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000110  00000000  00000000  00000df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000114  00000000  00000000  00000f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  00001018  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <main>
  8a:	0c 94 2c 01 	jmp	0x258	; 0x258 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <adc_init>:

void adc_init()
{
  92:	80 e4       	ldi	r24, 0x40	; 64
  94:	87 b9       	out	0x07, r24	; 7
ADMUX=(1<<REFS0);
ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  96:	87 e8       	ldi	r24, 0x87	; 135
  98:	86 b9       	out	0x06, r24	; 6
}
  9a:	08 95       	ret

0000009c <adc_read>:

unsigned int adc_read(char ch)
{
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	87 b9       	out	0x07, r24	; 7
ADMUX=0x40|ch;
ADCSRA|=(1<<ADSC);
  a0:	36 9a       	sbi	0x06, 6	; 6
while((ADCSRA&0b00010000)==0);
  a2:	34 9b       	sbis	0x06, 4	; 6
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <adc_read+0x6>
ADCSRA|=(1<<ADIF);
  a6:	34 9a       	sbi	0x06, 4	; 6
return ADC;
  a8:	24 b1       	in	r18, 0x04	; 4
  aa:	35 b1       	in	r19, 0x05	; 5
  ac:	c9 01       	movw	r24, r18
  ae:	08 95       	ret

000000b0 <lcd_command>:
lcd_command(0X0c);		// screen on cursor off
lcd_command(0X06);		//auto increment
}

void lcd_command(char cmd)
{
  b0:	28 2f       	mov	r18, r24
  b2:	20 7f       	andi	r18, 0xF0	; 240
  b4:	25 bb       	out	0x15, r18	; 21

LCD=(cmd&0xf0);
LCD&=~(1<<rs);
  b6:	a8 98       	cbi	0x15, 0	; 21
LCD&=~(1<<rw);
  b8:	a8 98       	cbi	0x15, 0	; 21
LCD|=(1<<en);
  ba:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  bc:	24 ef       	ldi	r18, 0xF4	; 244
  be:	31 e0       	ldi	r19, 0x01	; 1
  c0:	f9 01       	movw	r30, r18
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_command+0x12>
_delay_ms(2);		
LCD&=~(1<<en);
  c6:	aa 98       	cbi	0x15, 2	; 21

LCD=(cmd<<4)&0xf0;
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	44 e0       	ldi	r20, 0x04	; 4
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	4a 95       	dec	r20
  d2:	e1 f7       	brne	.-8      	; 0xcc <lcd_command+0x1c>
  d4:	85 bb       	out	0x15, r24	; 21
LCD|=(1<<en);
  d6:	aa 9a       	sbi	0x15, 2	; 21
  d8:	c9 01       	movw	r24, r18
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <lcd_command+0x2a>
_delay_ms(2);
LCD&=~(1<<en);
  de:	aa 98       	cbi	0x15, 2	; 21

}
  e0:	08 95       	ret

000000e2 <lcd_init>:
#define LCD PORTC
#define en 2
char *str;

void lcd_init()
{
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_command>
lcd_command(0X02);		// home screen
lcd_command(0X28);		// 4 bit mode
  ea:	88 e2       	ldi	r24, 0x28	; 40
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_command>
lcd_command(0X0c);		// screen on cursor off
  f2:	8c e0       	ldi	r24, 0x0C	; 12
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_command>
lcd_command(0X06);		//auto increment
  fa:	86 e0       	ldi	r24, 0x06	; 6
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_command>
}
 102:	08 95       	ret

00000104 <lcd_data>:
LCD&=~(1<<en);

}

void lcd_data(char data)
{
 104:	28 2f       	mov	r18, r24
 106:	20 7f       	andi	r18, 0xF0	; 240
 108:	25 bb       	out	0x15, r18	; 21
LCD=data&0xf0;
LCD|=(1<<rs);
 10a:	a8 9a       	sbi	0x15, 0	; 21
LCD|=(1<<en);
 10c:	aa 9a       	sbi	0x15, 2	; 21
 10e:	24 ef       	ldi	r18, 0xF4	; 244
 110:	31 e0       	ldi	r19, 0x01	; 1
 112:	f9 01       	movw	r30, r18
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <lcd_data+0x10>
_delay_ms(2);
LCD&=~(1<<en);
 118:	aa 98       	cbi	0x15, 2	; 21

LCD=(data<<4)&0xf0;
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	54 e0       	ldi	r21, 0x04	; 4
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	5a 95       	dec	r21
 124:	e1 f7       	brne	.-8      	; 0x11e <lcd_data+0x1a>
 126:	85 bb       	out	0x15, r24	; 21
LCD|=(1<<rs);
 128:	a8 9a       	sbi	0x15, 0	; 21
LCD|=(1<<en);
 12a:	aa 9a       	sbi	0x15, 2	; 21
 12c:	c9 01       	movw	r24, r18
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_data+0x2a>
_delay_ms(2);
LCD&=~(1<<en);
 132:	aa 98       	cbi	0x15, 2	; 21
}
 134:	08 95       	ret

00000136 <lcd_string>:



void lcd_string(unsigned char *str)
{
 136:	ef 92       	push	r14
 138:	ff 92       	push	r15
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	ec 01       	movw	r28, r24
 142:	10 e0       	ldi	r17, 0x00	; 0
 144:	6a ef       	ldi	r22, 0xFA	; 250
 146:	e6 2e       	mov	r14, r22
 148:	f1 2c       	mov	r15, r1
 14a:	06 c0       	rjmp	.+12     	; 0x158 <lcd_string+0x22>
char d=0;

while(str[d]!='\0')
{
lcd_data(str[d]);
 14c:	0e 94 82 00 	call	0x104	; 0x104 <lcd_data>
d++;
 150:	1f 5f       	subi	r17, 0xFF	; 255
 152:	c7 01       	movw	r24, r14
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <lcd_string+0x1e>

void lcd_string(unsigned char *str)
{
char d=0;

while(str[d]!='\0')
 158:	fe 01       	movw	r30, r28
 15a:	e1 0f       	add	r30, r17
 15c:	f1 1d       	adc	r31, r1
 15e:	80 81       	ld	r24, Z
 160:	88 23       	and	r24, r24
 162:	a1 f7       	brne	.-24     	; 0x14c <lcd_string+0x16>
{
lcd_data(str[d]);
d++;
_delay_ms(1);
}
}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	1f 91       	pop	r17
 16a:	ff 90       	pop	r15
 16c:	ef 90       	pop	r14
 16e:	08 95       	ret

00000170 <lcd_number>:




void lcd_number(unsigned int no)
{
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	ec 01       	movw	r28, r24

lcd_command(0x04);
 176:	84 e0       	ldi	r24, 0x04	; 4
 178:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_command>
int value=0;

if (no==0)
 17c:	20 97       	sbiw	r28, 0x00	; 0
 17e:	91 f4       	brne	.+36     	; 0x1a4 <lcd_number+0x34>
	lcd_data('0');
 180:	80 e3       	ldi	r24, 0x30	; 48
 182:	0e 94 82 00 	call	0x104	; 0x104 <lcd_data>
 186:	0e c0       	rjmp	.+28     	; 0x1a4 <lcd_number+0x34>
while(no!=0)
{
	value = no%10;
	lcd_data(48+value);
 188:	ce 01       	movw	r24, r28
 18a:	6a e0       	ldi	r22, 0x0A	; 10
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	0e 94 18 01 	call	0x230	; 0x230 <__udivmodhi4>
 192:	80 5d       	subi	r24, 0xD0	; 208
 194:	0e 94 82 00 	call	0x104	; 0x104 <lcd_data>
	no=no/10;
 198:	ce 01       	movw	r24, r28
 19a:	6a e0       	ldi	r22, 0x0A	; 10
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	0e 94 18 01 	call	0x230	; 0x230 <__udivmodhi4>
 1a2:	eb 01       	movw	r28, r22
lcd_command(0x04);
int value=0;

if (no==0)
	lcd_data('0');
while(no!=0)
 1a4:	20 97       	sbiw	r28, 0x00	; 0
 1a6:	81 f7       	brne	.-32     	; 0x188 <lcd_number+0x18>
{
	value = no%10;
	lcd_data(48+value);
	no=no/10;
}
lcd_command(0x06);
 1a8:	86 e0       	ldi	r24, 0x06	; 6
 1aa:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_command>
}
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <initpwm>:
#include<util/delay.h>
#include<avr/adc.h>
#include<avr/lcd.h>
void initpwm()

{
 1b4:	83 b7       	in	r24, 0x33	; 51
 1b6:	8a 61       	ori	r24, 0x1A	; 26
 1b8:	83 bf       	out	0x33, r24	; 51
TCCR0|=(1<<WGM01)|(1<<COM00)|(1<<CS01);
DDRB=0b00001000;
 1ba:	88 e0       	ldi	r24, 0x08	; 8
 1bc:	87 bb       	out	0x17, r24	; 23
}
 1be:	08 95       	ret

000001c0 <main>:

void main()
{
 1c0:	0f 93       	push	r16
 1c2:	1f 93       	push	r17
lcd_init();
 1c4:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_init>
lcd_command(0x8f);
 1c8:	8f e8       	ldi	r24, 0x8F	; 143
 1ca:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_command>
#include<avr/adc.h>
#include<avr/lcd.h>
void initpwm()

{
TCCR0|=(1<<WGM01)|(1<<COM00)|(1<<CS01);
 1ce:	83 b7       	in	r24, 0x33	; 51
 1d0:	8a 61       	ori	r24, 0x1A	; 26
 1d2:	83 bf       	out	0x33, r24	; 51
DDRB=0b00001000;
 1d4:	88 e0       	ldi	r24, 0x08	; 8
 1d6:	87 bb       	out	0x17, r24	; 23

void adc_init()
{
ADMUX=(1<<REFS0);
 1d8:	80 e4       	ldi	r24, 0x40	; 64
 1da:	87 b9       	out	0x07, r24	; 7
ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 1dc:	87 e8       	ldi	r24, 0x87	; 135
 1de:	86 b9       	out	0x06, r24	; 6
lcd_init();
lcd_command(0x8f);
initpwm();
adc_init();

DDRD=0xf0;
 1e0:	80 ef       	ldi	r24, 0xF0	; 240
 1e2:	81 bb       	out	0x11, r24	; 17

while(1)
{

PORTD=0xef;
 1e4:	0f ee       	ldi	r16, 0xEF	; 239
 1e6:	24 ec       	ldi	r18, 0xC4	; 196
 1e8:	39 e0       	ldi	r19, 0x09	; 9
_delay_ms(10);
if((PIND&0x01)==0x00)
{OCR0=59;
 1ea:	1b e3       	ldi	r17, 0x3B	; 59
}
if((PIND&0x02)==0x00)
{OCR0=52;
 1ec:	b4 e3       	ldi	r27, 0x34	; 52
}
if((PIND&0x04)==0x00)
{OCR0=46;
 1ee:	ae e2       	ldi	r26, 0x2E	; 46
}
if((PIND&0x08)==0x00)
{OCR0=44;
 1f0:	fc e2       	ldi	r31, 0x2C	; 44
}

PORTD=0xdf;
 1f2:	ef ed       	ldi	r30, 0xDF	; 223
_delay_ms(10);
if((PIND&0x01)==0x00)
{OCR0=38;
 1f4:	76 e2       	ldi	r23, 0x26	; 38
}
if((PIND&0x02)==0x00)
{OCR0=34;
 1f6:	62 e2       	ldi	r22, 0x22	; 34
}
if((PIND&0x04)==0x00)
{OCR0=30;
 1f8:	5e e1       	ldi	r21, 0x1E	; 30
}
if((PIND&0x08)==0x00)
{OCR0=28;
 1fa:	4c e1       	ldi	r20, 0x1C	; 28
DDRD=0xf0;

while(1)
{

PORTD=0xef;
 1fc:	02 bb       	out	0x12, r16	; 18
 1fe:	c9 01       	movw	r24, r18
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <main+0x40>
_delay_ms(10);
if((PIND&0x01)==0x00)
 204:	80 9b       	sbis	0x10, 0	; 16
{OCR0=59;
 206:	1c bf       	out	0x3c, r17	; 60
}
if((PIND&0x02)==0x00)
 208:	81 9b       	sbis	0x10, 1	; 16
{OCR0=52;
 20a:	bc bf       	out	0x3c, r27	; 60
}
if((PIND&0x04)==0x00)
 20c:	82 9b       	sbis	0x10, 2	; 16
{OCR0=46;
 20e:	ac bf       	out	0x3c, r26	; 60
}
if((PIND&0x08)==0x00)
 210:	83 9b       	sbis	0x10, 3	; 16
{OCR0=44;
 212:	fc bf       	out	0x3c, r31	; 60
}

PORTD=0xdf;
 214:	e2 bb       	out	0x12, r30	; 18
 216:	c9 01       	movw	r24, r18
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <main+0x58>
_delay_ms(10);
if((PIND&0x01)==0x00)
 21c:	80 9b       	sbis	0x10, 0	; 16
{OCR0=38;
 21e:	7c bf       	out	0x3c, r23	; 60
}
if((PIND&0x02)==0x00)
 220:	81 9b       	sbis	0x10, 1	; 16
{OCR0=34;
 222:	6c bf       	out	0x3c, r22	; 60
}
if((PIND&0x04)==0x00)
 224:	82 9b       	sbis	0x10, 2	; 16
{OCR0=30;
 226:	5c bf       	out	0x3c, r21	; 60
}
if((PIND&0x08)==0x00)
 228:	83 99       	sbic	0x10, 3	; 16
 22a:	e8 cf       	rjmp	.-48     	; 0x1fc <main+0x3c>
{OCR0=28;
 22c:	4c bf       	out	0x3c, r20	; 60
 22e:	e6 cf       	rjmp	.-52     	; 0x1fc <main+0x3c>

00000230 <__udivmodhi4>:
 230:	aa 1b       	sub	r26, r26
 232:	bb 1b       	sub	r27, r27
 234:	51 e1       	ldi	r21, 0x11	; 17
 236:	07 c0       	rjmp	.+14     	; 0x246 <__udivmodhi4_ep>

00000238 <__udivmodhi4_loop>:
 238:	aa 1f       	adc	r26, r26
 23a:	bb 1f       	adc	r27, r27
 23c:	a6 17       	cp	r26, r22
 23e:	b7 07       	cpc	r27, r23
 240:	10 f0       	brcs	.+4      	; 0x246 <__udivmodhi4_ep>
 242:	a6 1b       	sub	r26, r22
 244:	b7 0b       	sbc	r27, r23

00000246 <__udivmodhi4_ep>:
 246:	88 1f       	adc	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	5a 95       	dec	r21
 24c:	a9 f7       	brne	.-22     	; 0x238 <__udivmodhi4_loop>
 24e:	80 95       	com	r24
 250:	90 95       	com	r25
 252:	bc 01       	movw	r22, r24
 254:	cd 01       	movw	r24, r26
 256:	08 95       	ret

00000258 <_exit>:
 258:	f8 94       	cli

0000025a <__stop_program>:
 25a:	ff cf       	rjmp	.-2      	; 0x25a <__stop_program>
