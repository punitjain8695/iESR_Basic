
Buzzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000035  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000011f  00000000  00000000  000001e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e3  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000188  00000000  00000000  000003e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000079  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000002b  00000000  00000000  00000629  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e3       	ldi	r30, 0x3C	; 60
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 30       	cpi	r26, 0x00	; 0
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 76 00 	call	0xec	; 0xec <main>
  c6:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000000ce <adc_init>:

void adc_init()
{
  ce:	80 e4       	ldi	r24, 0x40	; 64
  d0:	87 b9       	out	0x07, r24	; 7
ADMUX=(1<<REFS0);
ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  d2:	87 e8       	ldi	r24, 0x87	; 135
  d4:	86 b9       	out	0x06, r24	; 6
}
  d6:	08 95       	ret

000000d8 <adc_read>:

unsigned int adc_read(char ch)
{
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	87 b9       	out	0x07, r24	; 7
ADMUX=0x40|ch;
ADCSRA|=(1<<ADSC);
  dc:	36 9a       	sbi	0x06, 6	; 6
while((ADCSRA&0b00010000)==0);
  de:	34 9b       	sbis	0x06, 4	; 6
  e0:	fe cf       	rjmp	.-4      	; 0xde <adc_read+0x6>
ADCSRA|=(1<<ADIF);
  e2:	34 9a       	sbi	0x06, 4	; 6
return ADC;
  e4:	24 b1       	in	r18, 0x04	; 4
  e6:	35 b1       	in	r19, 0x05	; 5
  e8:	c9 01       	movw	r24, r18
  ea:	08 95       	ret

000000ec <main>:
#define F_CPU 16000000UL
#include<util/delay.h>
#include<avr/adc.h>

void main()
{
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	84 bb       	out	0x14, r24	; 20
DDRC=0xff;
DDRA=0xf0;
  f0:	80 ef       	ldi	r24, 0xF0	; 240
  f2:	8a bb       	out	0x1a, r24	; 26

void adc_init()
{
ADMUX=(1<<REFS0);
  f4:	80 e4       	ldi	r24, 0x40	; 64
  f6:	87 b9       	out	0x07, r24	; 7
ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  f8:	87 e8       	ldi	r24, 0x87	; 135
  fa:	86 b9       	out	0x06, r24	; 6
}

unsigned int adc_read(char ch)
{
ADMUX=0x40|ch;
  fc:	50 e4       	ldi	r21, 0x40	; 64
ADCSRA|=(1<<ADSC);
  fe:	41 e4       	ldi	r20, 0x41	; 65
ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
}

unsigned int adc_read(char ch)
{
ADMUX=0x40|ch;
 100:	57 b9       	out	0x07, r21	; 7
ADCSRA|=(1<<ADSC);
 102:	36 9a       	sbi	0x06, 6	; 6
while((ADCSRA&0b00010000)==0);
 104:	34 9b       	sbis	0x06, 4	; 6
 106:	fe cf       	rjmp	.-4      	; 0x104 <main+0x18>
ADCSRA|=(1<<ADIF);
 108:	34 9a       	sbi	0x06, 4	; 6
return ADC;
 10a:	24 b1       	in	r18, 0x04	; 4
 10c:	35 b1       	in	r19, 0x05	; 5
ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
}

unsigned int adc_read(char ch)
{
ADMUX=0x40|ch;
 10e:	47 b9       	out	0x07, r20	; 7
ADCSRA|=(1<<ADSC);
 110:	36 9a       	sbi	0x06, 6	; 6
while((ADCSRA&0b00010000)==0);
 112:	34 9b       	sbis	0x06, 4	; 6
 114:	fe cf       	rjmp	.-4      	; 0x112 <main+0x26>
ADCSRA|=(1<<ADIF);
 116:	34 9a       	sbi	0x06, 4	; 6
return ADC;
 118:	84 b1       	in	r24, 0x04	; 4
 11a:	95 b1       	in	r25, 0x05	; 5
while(1)
{
i=adc_read(0);
j=adc_read(1);

if(i>600)
 11c:	29 55       	subi	r18, 0x59	; 89
 11e:	32 40       	sbci	r19, 0x02	; 2
 120:	78 f3       	brcs	.-34     	; 0x100 <main+0x14>
{
if(j<600)
 122:	22 e0       	ldi	r18, 0x02	; 2
 124:	88 35       	cpi	r24, 0x58	; 88
 126:	92 07       	cpc	r25, r18
 128:	10 f4       	brcc	.+4      	; 0x12e <main+0x42>
{
PORTA|=(1<<7);  // this is equivalent to PORTA|=0b10000000;
 12a:	df 9a       	sbi	0x1b, 7	; 27
 12c:	e9 cf       	rjmp	.-46     	; 0x100 <main+0x14>
}
else if(j>600)
 12e:	88 55       	subi	r24, 0x58	; 88
 130:	92 40       	sbci	r25, 0x02	; 2
 132:	31 f3       	breq	.-52     	; 0x100 <main+0x14>
{
PORTA&=0b01111111;
 134:	df 98       	cbi	0x1b, 7	; 27
 136:	e4 cf       	rjmp	.-56     	; 0x100 <main+0x14>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
