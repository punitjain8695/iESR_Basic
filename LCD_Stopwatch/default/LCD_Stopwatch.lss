
LCD_Stopwatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000002f8  0000036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800068  00000300  00000374  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000068  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000032f  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000147  00000000  00000000  0000072b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e0  00000000  00000000  00000872  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00000c54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000103  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000159  00000000  00000000  00000dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c7 00 	call	0x18e	; 0x18e <main>
  8a:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_command>:
lcd_command(0X0c);		// screen on cursor off
lcd_command(0X06);		//auto increment
}

void lcd_command(char cmd)
{
  92:	28 2f       	mov	r18, r24
  94:	20 7f       	andi	r18, 0xF0	; 240
  96:	25 bb       	out	0x15, r18	; 21

LCD=(cmd&0xf0);
LCD&=~(1<<rs);
  98:	a8 98       	cbi	0x15, 0	; 21
LCD&=~(1<<rw);
  9a:	a8 98       	cbi	0x15, 0	; 21
LCD|=(1<<en);
  9c:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	20 e4       	ldi	r18, 0x40	; 64
  a0:	3c e9       	ldi	r19, 0x9C	; 156
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_command+0x12>
_delay_ms(10);		
LCD&=~(1<<en);
  a8:	aa 98       	cbi	0x15, 2	; 21

LCD=(cmd<<4)&0xf0;
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	44 e0       	ldi	r20, 0x04	; 4
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	4a 95       	dec	r20
  b4:	e1 f7       	brne	.-8      	; 0xae <lcd_command+0x1c>
  b6:	85 bb       	out	0x15, r24	; 21
LCD|=(1<<en);
  b8:	aa 9a       	sbi	0x15, 2	; 21
  ba:	c9 01       	movw	r24, r18
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcd_command+0x2a>
_delay_ms(10);
LCD&=~(1<<en);
  c0:	aa 98       	cbi	0x15, 2	; 21

}
  c2:	08 95       	ret

000000c4 <lcd_init>:
#define LCD PORTC
#define en 2
char *str;

void lcd_init()
{
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_command(0X02);		// home screen
lcd_command(0X28);		// 4 bit mode
  cc:	88 e2       	ldi	r24, 0x28	; 40
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_command(0X0c);		// screen on cursor off
  d4:	8c e0       	ldi	r24, 0x0C	; 12
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_command(0X06);		//auto increment
  dc:	86 e0       	ldi	r24, 0x06	; 6
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
  e4:	08 95       	ret

000000e6 <lcd_data>:
LCD&=~(1<<en);

}

void lcd_data(char data)
{
  e6:	28 2f       	mov	r18, r24
  e8:	20 7f       	andi	r18, 0xF0	; 240
  ea:	25 bb       	out	0x15, r18	; 21
LCD=data&0xf0;
LCD|=(1<<rs);
  ec:	a8 9a       	sbi	0x15, 0	; 21
LCD|=(1<<en);
  ee:	aa 9a       	sbi	0x15, 2	; 21
  f0:	20 e4       	ldi	r18, 0x40	; 64
  f2:	3c e9       	ldi	r19, 0x9C	; 156
  f4:	f9 01       	movw	r30, r18
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <lcd_data+0x10>
_delay_ms(10);
LCD&=~(1<<en);
  fa:	aa 98       	cbi	0x15, 2	; 21

LCD=(data<<4)&0xf0;
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	54 e0       	ldi	r21, 0x04	; 4
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	5a 95       	dec	r21
 106:	e1 f7       	brne	.-8      	; 0x100 <lcd_data+0x1a>
 108:	85 bb       	out	0x15, r24	; 21
LCD|=(1<<rs);
 10a:	a8 9a       	sbi	0x15, 0	; 21
LCD|=(1<<en);
 10c:	aa 9a       	sbi	0x15, 2	; 21
 10e:	c9 01       	movw	r24, r18
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_data+0x2a>
_delay_ms(10);
LCD&=~(1<<en);
 114:	aa 98       	cbi	0x15, 2	; 21
}
 116:	08 95       	ret

00000118 <lcd_string>:

void lcd_string(unsigned char *str)
{
 118:	ef 92       	push	r14
 11a:	ff 92       	push	r15
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	ec 01       	movw	r28, r24
 124:	10 e0       	ldi	r17, 0x00	; 0
 126:	60 e4       	ldi	r22, 0x40	; 64
 128:	e6 2e       	mov	r14, r22
 12a:	6c e9       	ldi	r22, 0x9C	; 156
 12c:	f6 2e       	mov	r15, r22
 12e:	06 c0       	rjmp	.+12     	; 0x13c <lcd_string+0x24>
char d=0;

while(str[d]!='\0')
{
lcd_data(str[d]);
 130:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
d++;
 134:	1f 5f       	subi	r17, 0xFF	; 255
 136:	c7 01       	movw	r24, r14
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_string+0x20>

void lcd_string(unsigned char *str)
{
char d=0;

while(str[d]!='\0')
 13c:	fe 01       	movw	r30, r28
 13e:	e1 0f       	add	r30, r17
 140:	f1 1d       	adc	r31, r1
 142:	80 81       	ld	r24, Z
 144:	88 23       	and	r24, r24
 146:	a1 f7       	brne	.-24     	; 0x130 <lcd_string+0x18>
{
lcd_data(str[d]);
d++;
_delay_ms(10);
}
}
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	1f 91       	pop	r17
 14e:	ff 90       	pop	r15
 150:	ef 90       	pop	r14
 152:	08 95       	ret

00000154 <lcd_num>:

void lcd_num(unsigned int no)
{
 154:	0f 93       	push	r16
 156:	1f 93       	push	r17
 158:	8c 01       	movw	r16, r24
lcd_command(0x04);
 15a:	84 e0       	ldi	r24, 0x04	; 4
 15c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
int value=0;
value=no%10;
lcd_data(48+value);
 160:	c8 01       	movw	r24, r16
 162:	6a e0       	ldi	r22, 0x0A	; 10
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	0e 94 66 01 	call	0x2cc	; 0x2cc <__udivmodhi4>
 16a:	80 5d       	subi	r24, 0xD0	; 208
 16c:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
value=no/10;
lcd_data(48+value);
 170:	c8 01       	movw	r24, r16
 172:	6a e0       	ldi	r22, 0x0A	; 10
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	0e 94 66 01 	call	0x2cc	; 0x2cc <__udivmodhi4>
 17a:	86 2f       	mov	r24, r22
 17c:	80 5d       	subi	r24, 0xD0	; 208
 17e:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>

lcd_command(0x06);
 182:	86 e0       	ldi	r24, 0x06	; 6
 184:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
 188:	1f 91       	pop	r17
 18a:	0f 91       	pop	r16
 18c:	08 95       	ret

0000018e <main>:



void main()
{
 18e:	cf 92       	push	r12
 190:	df 92       	push	r13
 192:	ef 92       	push	r14
 194:	ff 92       	push	r15
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
DDRD=0xf0;
 19e:	80 ef       	ldi	r24, 0xF0	; 240
 1a0:	81 bb       	out	0x11, r24	; 17
DDRB=255;
 1a2:	9f ef       	ldi	r25, 0xFF	; 255
 1a4:	97 bb       	out	0x17, r25	; 23
PORTD=0xef;
 1a6:	8f ee       	ldi	r24, 0xEF	; 239
 1a8:	82 bb       	out	0x12, r24	; 18
int i,hr,min,sec;
DDRC=0xff;
 1aa:	94 bb       	out	0x14, r25	; 20

lcd_init();
 1ac:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_init>
 1b0:	e0 ea       	ldi	r30, 0xA0	; 160
 1b2:	ce 2e       	mov	r12, r30
 1b4:	ef e0       	ldi	r30, 0x0F	; 15
 1b6:	de 2e       	mov	r13, r30
 1b8:	05 c0       	rjmp	.+10     	; 0x1c4 <main+0x36>
start:

while((PIND&0x02)==0x02)
{
if((PIND&0x02)==0)
 1ba:	81 99       	sbic	0x10, 1	; 16
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <main+0x36>
{
while((PIND&0x01)==0);
 1be:	80 9b       	sbis	0x10, 0	; 16
 1c0:	fe cf       	rjmp	.-4      	; 0x1be <main+0x30>
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <main+0x3a>
DDRC=0xff;

lcd_init();
start:

while((PIND&0x02)==0x02)
 1c4:	81 99       	sbic	0x10, 1	; 16
 1c6:	f9 cf       	rjmp	.-14     	; 0x1ba <main+0x2c>
while((PIND&0x01)==0);
break;
}
}

lcd_command(0x01);
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_command(0x85);
 1ce:	85 e8       	ldi	r24, 0x85	; 133
 1d0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_string(":");
 1d4:	80 e6       	ldi	r24, 0x60	; 96
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_string>
lcd_command(0x8A);
 1dc:	8a e8       	ldi	r24, 0x8A	; 138
 1de:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_string(":");
 1e2:	80 e6       	ldi	r24, 0x60	; 96
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_string>
lcd_command(0x8E);
 1ea:	8e e8       	ldi	r24, 0x8E	; 142
 1ec:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_string("S");
 1f0:	82 e6       	ldi	r24, 0x62	; 98
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_string>
lcd_command(0x89);
 1f8:	89 e8       	ldi	r24, 0x89	; 137
 1fa:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_string("M");
 1fe:	84 e6       	ldi	r24, 0x64	; 100
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_string>
lcd_command(0x84);
 206:	84 e8       	ldi	r24, 0x84	; 132
 208:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_string("H");
 20c:	86 e6       	ldi	r24, 0x66	; 102
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_string>
 214:	05 c0       	rjmp	.+10     	; 0x220 <main+0x92>

while((PIND&0x01)==1)
{
if((PIND&0x01)==0)
 216:	80 99       	sbic	0x10, 0	; 16
 218:	03 c0       	rjmp	.+6      	; 0x220 <main+0x92>
{
while((PIND&0x01)==0);
 21a:	80 9b       	sbis	0x10, 0	; 16
 21c:	fe cf       	rjmp	.-4      	; 0x21a <main+0x8c>
 21e:	47 c0       	rjmp	.+142    	; 0x2ae <main+0x120>
lcd_command(0x89);
lcd_string("M");
lcd_command(0x84);
lcd_string("H");

while((PIND&0x01)==1)
 220:	80 99       	sbic	0x10, 0	; 16
 222:	f9 cf       	rjmp	.-14     	; 0x216 <main+0x88>
 224:	44 c0       	rjmp	.+136    	; 0x2ae <main+0x120>
for (min=1;min<60;min++)
{
for (sec=0;sec<60;sec++)
{

lcd_command(0x8C);
 226:	8c e8       	ldi	r24, 0x8C	; 140
 228:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_num(sec);
 22c:	ce 01       	movw	r24, r28
 22e:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_num>
 232:	20 e0       	ldi	r18, 0x00	; 0
 234:	30 e0       	ldi	r19, 0x00	; 0

for (i=0;i<900;i++)
{
if((PIND&0x01)==0)
 236:	80 99       	sbic	0x10, 0	; 16
 238:	0c c0       	rjmp	.+24     	; 0x252 <main+0xc4>
{
while((PIND&0x01)==0);
 23a:	80 9b       	sbis	0x10, 0	; 16
 23c:	fe cf       	rjmp	.-4      	; 0x23a <main+0xac>
 23e:	05 c0       	rjmp	.+10     	; 0x24a <main+0xbc>
while((PIND&0x01)==0x01)
{
if((PIND&0x02)==0)
 240:	81 99       	sbic	0x10, 1	; 16
 242:	03 c0       	rjmp	.+6      	; 0x24a <main+0xbc>
{
while((PIND&0x02)==0);
 244:	81 9b       	sbis	0x10, 1	; 16
 246:	fe cf       	rjmp	.-4      	; 0x244 <main+0xb6>
 248:	bd cf       	rjmp	.-134    	; 0x1c4 <main+0x36>
for (i=0;i<900;i++)
{
if((PIND&0x01)==0)
{
while((PIND&0x01)==0);
while((PIND&0x01)==0x01)
 24a:	80 99       	sbic	0x10, 0	; 16
 24c:	f9 cf       	rjmp	.-14     	; 0x240 <main+0xb2>
{
while((PIND&0x02)==0);
goto start;
}
}
while((PIND&0x01)==0);
 24e:	80 9b       	sbis	0x10, 0	; 16
 250:	fe cf       	rjmp	.-4      	; 0x24e <main+0xc0>
}
if((PIND&0x02)==0)
 252:	81 99       	sbic	0x10, 1	; 16
 254:	03 c0       	rjmp	.+6      	; 0x25c <main+0xce>
{
while((PIND&0x02)==0);
 256:	81 9b       	sbis	0x10, 1	; 16
 258:	fe cf       	rjmp	.-4      	; 0x256 <main+0xc8>
 25a:	b4 cf       	rjmp	.-152    	; 0x1c4 <main+0x36>
 25c:	c6 01       	movw	r24, r12
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <main+0xd0>
{

lcd_command(0x8C);
lcd_num(sec);

for (i=0;i<900;i++)
 262:	2f 5f       	subi	r18, 0xFF	; 255
 264:	3f 4f       	sbci	r19, 0xFF	; 255
 266:	83 e0       	ldi	r24, 0x03	; 3
 268:	24 38       	cpi	r18, 0x84	; 132
 26a:	38 07       	cpc	r19, r24
 26c:	21 f7       	brne	.-56     	; 0x236 <main+0xa8>

for (hr=1;hr<24;hr++)
{
for (min=1;min<60;min++)
{
for (sec=0;sec<60;sec++)
 26e:	21 96       	adiw	r28, 0x01	; 1
 270:	cc 33       	cpi	r28, 0x3C	; 60
 272:	d1 05       	cpc	r29, r1
 274:	c1 f6       	brne	.-80     	; 0x226 <main+0x98>
}
_delay_ms(1);

}
}
lcd_command(0x87);
 276:	87 e8       	ldi	r24, 0x87	; 135
 278:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_num(min);
 27c:	c8 01       	movw	r24, r16
 27e:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_num>
}


for (hr=1;hr<24;hr++)
{
for (min=1;min<60;min++)
 282:	0f 5f       	subi	r16, 0xFF	; 255
 284:	1f 4f       	sbci	r17, 0xFF	; 255
 286:	0c 33       	cpi	r16, 0x3C	; 60
 288:	11 05       	cpc	r17, r1
 28a:	19 f0       	breq	.+6      	; 0x292 <main+0x104>
 28c:	c0 e0       	ldi	r28, 0x00	; 0
 28e:	d0 e0       	ldi	r29, 0x00	; 0
 290:	ca cf       	rjmp	.-108    	; 0x226 <main+0x98>
}
}
lcd_command(0x87);
lcd_num(min);
}
lcd_command(0x82);
 292:	82 e8       	ldi	r24, 0x82	; 130
 294:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_num(hr);
 298:	c7 01       	movw	r24, r14
 29a:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_num>
break;
}
}


for (hr=1;hr<24;hr++)
 29e:	08 94       	sec
 2a0:	e1 1c       	adc	r14, r1
 2a2:	f1 1c       	adc	r15, r1
 2a4:	88 e1       	ldi	r24, 0x18	; 24
 2a6:	e8 16       	cp	r14, r24
 2a8:	f1 04       	cpc	r15, r1
 2aa:	39 f0       	breq	.+14     	; 0x2ba <main+0x12c>
 2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <main+0x126>
 2ae:	71 e0       	ldi	r23, 0x01	; 1
 2b0:	e7 2e       	mov	r14, r23
 2b2:	f1 2c       	mov	r15, r1
 2b4:	01 e0       	ldi	r16, 0x01	; 1
 2b6:	10 e0       	ldi	r17, 0x00	; 0
 2b8:	e9 cf       	rjmp	.-46     	; 0x28c <main+0xfe>
}
lcd_command(0x82);
lcd_num(hr);
}

}
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	1f 91       	pop	r17
 2c0:	0f 91       	pop	r16
 2c2:	ff 90       	pop	r15
 2c4:	ef 90       	pop	r14
 2c6:	df 90       	pop	r13
 2c8:	cf 90       	pop	r12
 2ca:	08 95       	ret

000002cc <__udivmodhi4>:
 2cc:	aa 1b       	sub	r26, r26
 2ce:	bb 1b       	sub	r27, r27
 2d0:	51 e1       	ldi	r21, 0x11	; 17
 2d2:	07 c0       	rjmp	.+14     	; 0x2e2 <__udivmodhi4_ep>

000002d4 <__udivmodhi4_loop>:
 2d4:	aa 1f       	adc	r26, r26
 2d6:	bb 1f       	adc	r27, r27
 2d8:	a6 17       	cp	r26, r22
 2da:	b7 07       	cpc	r27, r23
 2dc:	10 f0       	brcs	.+4      	; 0x2e2 <__udivmodhi4_ep>
 2de:	a6 1b       	sub	r26, r22
 2e0:	b7 0b       	sbc	r27, r23

000002e2 <__udivmodhi4_ep>:
 2e2:	88 1f       	adc	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	5a 95       	dec	r21
 2e8:	a9 f7       	brne	.-22     	; 0x2d4 <__udivmodhi4_loop>
 2ea:	80 95       	com	r24
 2ec:	90 95       	com	r25
 2ee:	bc 01       	movw	r22, r24
 2f0:	cd 01       	movw	r24, r26
 2f2:	08 95       	ret

000002f4 <_exit>:
 2f4:	f8 94       	cli

000002f6 <__stop_program>:
 2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <__stop_program>
