
timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000148  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000041  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001af  00000000  00000000  000001fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000011f  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000215  00000000  00000000  000004cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  000006e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d0  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000003b  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  0000083b  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  8a:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <adc_init>:

void adc_init()
{
  92:	80 e4       	ldi	r24, 0x40	; 64
  94:	87 b9       	out	0x07, r24	; 7
ADMUX=(1<<REFS0);
ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  96:	87 e8       	ldi	r24, 0x87	; 135
  98:	86 b9       	out	0x06, r24	; 6
}
  9a:	08 95       	ret

0000009c <adc_read>:

unsigned int adc_read(char ch)
{
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	87 b9       	out	0x07, r24	; 7
ADMUX=0x40|ch;
ADCSRA|=(1<<ADSC);
  a0:	36 9a       	sbi	0x06, 6	; 6
while((ADCSRA&0b00010000)==0);
  a2:	34 9b       	sbis	0x06, 4	; 6
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <adc_read+0x6>
ADCSRA|=(1<<ADIF);
  a6:	34 9a       	sbi	0x06, 4	; 6
return ADC;
  a8:	24 b1       	in	r18, 0x04	; 4
  aa:	35 b1       	in	r19, 0x05	; 5
  ac:	c9 01       	movw	r24, r18
  ae:	08 95       	ret

000000b0 <initpwm>:
#include<avr/io.h>
#define F_CPU 16000000
#include<util/delay.h>
#include<avr/adc.h>
void initpwm()
{
  b0:	83 b7       	in	r24, 0x33	; 51
  b2:	8a 61       	ori	r24, 0x1A	; 26
  b4:	83 bf       	out	0x33, r24	; 51
TCCR0|=(1<<WGM01)|(1<<COM00)|(1<<CS01);
DDRB=0b00001000;
  b6:	88 e0       	ldi	r24, 0x08	; 8
  b8:	87 bb       	out	0x17, r24	; 23
}
  ba:	08 95       	ret

000000bc <main>:

void main()
{
  bc:	83 b7       	in	r24, 0x33	; 51
  be:	8a 61       	ori	r24, 0x1A	; 26
  c0:	83 bf       	out	0x33, r24	; 51
#include<util/delay.h>
#include<avr/adc.h>
void initpwm()
{
TCCR0|=(1<<WGM01)|(1<<COM00)|(1<<CS01);
DDRB=0b00001000;
  c2:	88 e0       	ldi	r24, 0x08	; 8
  c4:	87 bb       	out	0x17, r24	; 23

void adc_init()
{
ADMUX=(1<<REFS0);
  c6:	80 e4       	ldi	r24, 0x40	; 64
  c8:	87 b9       	out	0x07, r24	; 7
ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  ca:	87 e8       	ldi	r24, 0x87	; 135
  cc:	86 b9       	out	0x06, r24	; 6
}

unsigned int adc_read(char ch)
{
ADMUX=0x40|ch;
  ce:	40 e4       	ldi	r20, 0x40	; 64
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d0:	e0 e4       	ldi	r30, 0x40	; 64
  d2:	fc e9       	ldi	r31, 0x9C	; 156
  d4:	47 b9       	out	0x07, r20	; 7
ADCSRA|=(1<<ADSC);
  d6:	36 9a       	sbi	0x06, 6	; 6
while((ADCSRA&0b00010000)==0);
  d8:	34 9b       	sbis	0x06, 4	; 6
  da:	fe cf       	rjmp	.-4      	; 0xd8 <main+0x1c>
ADCSRA|=(1<<ADIF);
  dc:	34 9a       	sbi	0x06, 4	; 6
return ADC;
  de:	24 b1       	in	r18, 0x04	; 4
  e0:	35 b1       	in	r19, 0x05	; 5
adc_init();
	while(1)
	{
	int i=adc_read(0);
	i=i/4;
	OCR0=i;
  e2:	c9 01       	movw	r24, r18
  e4:	64 e0       	ldi	r22, 0x04	; 4
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	0e 94 7b 00 	call	0xf6	; 0xf6 <__divmodhi4>
  ec:	6c bf       	out	0x3c, r22	; 60
  ee:	cf 01       	movw	r24, r30
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x34>
  f4:	ef cf       	rjmp	.-34     	; 0xd4 <main+0x18>

000000f6 <__divmodhi4>:
  f6:	97 fb       	bst	r25, 7
  f8:	09 2e       	mov	r0, r25
  fa:	07 26       	eor	r0, r23
  fc:	0a d0       	rcall	.+20     	; 0x112 <__divmodhi4_neg1>
  fe:	77 fd       	sbrc	r23, 7
 100:	04 d0       	rcall	.+8      	; 0x10a <__divmodhi4_neg2>
 102:	0c d0       	rcall	.+24     	; 0x11c <__udivmodhi4>
 104:	06 d0       	rcall	.+12     	; 0x112 <__divmodhi4_neg1>
 106:	00 20       	and	r0, r0
 108:	1a f4       	brpl	.+6      	; 0x110 <__divmodhi4_exit>

0000010a <__divmodhi4_neg2>:
 10a:	70 95       	com	r23
 10c:	61 95       	neg	r22
 10e:	7f 4f       	sbci	r23, 0xFF	; 255

00000110 <__divmodhi4_exit>:
 110:	08 95       	ret

00000112 <__divmodhi4_neg1>:
 112:	f6 f7       	brtc	.-4      	; 0x110 <__divmodhi4_exit>
 114:	90 95       	com	r25
 116:	81 95       	neg	r24
 118:	9f 4f       	sbci	r25, 0xFF	; 255
 11a:	08 95       	ret

0000011c <__udivmodhi4>:
 11c:	aa 1b       	sub	r26, r26
 11e:	bb 1b       	sub	r27, r27
 120:	51 e1       	ldi	r21, 0x11	; 17
 122:	07 c0       	rjmp	.+14     	; 0x132 <__udivmodhi4_ep>

00000124 <__udivmodhi4_loop>:
 124:	aa 1f       	adc	r26, r26
 126:	bb 1f       	adc	r27, r27
 128:	a6 17       	cp	r26, r22
 12a:	b7 07       	cpc	r27, r23
 12c:	10 f0       	brcs	.+4      	; 0x132 <__udivmodhi4_ep>
 12e:	a6 1b       	sub	r26, r22
 130:	b7 0b       	sbc	r27, r23

00000132 <__udivmodhi4_ep>:
 132:	88 1f       	adc	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	5a 95       	dec	r21
 138:	a9 f7       	brne	.-22     	; 0x124 <__udivmodhi4_loop>
 13a:	80 95       	com	r24
 13c:	90 95       	com	r25
 13e:	bc 01       	movw	r22, r24
 140:	cd 01       	movw	r24, r26
 142:	08 95       	ret

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
