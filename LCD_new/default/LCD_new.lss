
LCD_new.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  0000020c  00000280  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000006b  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002c3  00000000  00000000  0000030b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000127  00000000  00000000  000005ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002de  00000000  00000000  000006f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  000009d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e6  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000c1  00000000  00000000  00000b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000beb  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e0       	ldi	r30, 0x0C	; 12
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 30       	cpi	r26, 0x02	; 2
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <main>
  c6:	0c 94 04 01 	jmp	0x208	; 0x208 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <lcd_command>:
lcd_command(0X0c);		// screen on cursor off
lcd_command(0X06);		//auto increment
}

void lcd_command(char cmd)
{
  ce:	28 2f       	mov	r18, r24
  d0:	20 7f       	andi	r18, 0xF0	; 240
  d2:	25 bb       	out	0x15, r18	; 21

LCD=(cmd&0xf0);
LCD&=~(1<<rs);
  d4:	a8 98       	cbi	0x15, 0	; 21
LCD&=~(1<<rw);
  d6:	a8 98       	cbi	0x15, 0	; 21
LCD|=(1<<en);
  d8:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  da:	20 e4       	ldi	r18, 0x40	; 64
  dc:	3f e1       	ldi	r19, 0x1F	; 31
  de:	f9 01       	movw	r30, r18
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_command+0x12>
_delay_ms(2);		
LCD&=~(1<<en);
  e4:	aa 98       	cbi	0x15, 2	; 21

LCD=(cmd<<4)&0xf0;
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	44 e0       	ldi	r20, 0x04	; 4
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	4a 95       	dec	r20
  f0:	e1 f7       	brne	.-8      	; 0xea <lcd_command+0x1c>
  f2:	85 bb       	out	0x15, r24	; 21
LCD|=(1<<en);
  f4:	aa 9a       	sbi	0x15, 2	; 21
  f6:	c9 01       	movw	r24, r18
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_command+0x2a>
_delay_ms(2);
LCD&=~(1<<en);
  fc:	aa 98       	cbi	0x15, 2	; 21

}
  fe:	08 95       	ret

00000100 <lcd_init>:
#define LCD PORTC
#define en 2
char *str;

void lcd_init()
{
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 67 00 	call	0xce	; 0xce <lcd_command>
lcd_command(0X02);		// home screen
lcd_command(0X28);		// 4 bit mode
 108:	88 e2       	ldi	r24, 0x28	; 40
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 67 00 	call	0xce	; 0xce <lcd_command>
lcd_command(0X0c);		// screen on cursor off
 110:	8c e0       	ldi	r24, 0x0C	; 12
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 67 00 	call	0xce	; 0xce <lcd_command>
lcd_command(0X06);		//auto increment
 118:	86 e0       	ldi	r24, 0x06	; 6
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 67 00 	call	0xce	; 0xce <lcd_command>
}
 120:	08 95       	ret

00000122 <lcd_data>:
LCD&=~(1<<en);

}

void lcd_data(char data)
{
 122:	28 2f       	mov	r18, r24
 124:	20 7f       	andi	r18, 0xF0	; 240
 126:	25 bb       	out	0x15, r18	; 21
LCD=data&0xf0;
LCD|=(1<<rs);
 128:	a8 9a       	sbi	0x15, 0	; 21
LCD|=(1<<en);
 12a:	aa 9a       	sbi	0x15, 2	; 21
 12c:	20 e4       	ldi	r18, 0x40	; 64
 12e:	3f e1       	ldi	r19, 0x1F	; 31
 130:	f9 01       	movw	r30, r18
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <lcd_data+0x10>
_delay_ms(2);
LCD&=~(1<<en);
 136:	aa 98       	cbi	0x15, 2	; 21

LCD=(data<<4)&0xf0;
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	54 e0       	ldi	r21, 0x04	; 4
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	5a 95       	dec	r21
 142:	e1 f7       	brne	.-8      	; 0x13c <lcd_data+0x1a>
 144:	85 bb       	out	0x15, r24	; 21
LCD|=(1<<rs);
 146:	a8 9a       	sbi	0x15, 0	; 21
LCD|=(1<<en);
 148:	aa 9a       	sbi	0x15, 2	; 21
 14a:	c9 01       	movw	r24, r18
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_data+0x2a>
_delay_ms(2);
LCD&=~(1<<en);
 150:	aa 98       	cbi	0x15, 2	; 21
}
 152:	08 95       	ret

00000154 <lcd_string>:



void lcd_string(unsigned char *str)
{
 154:	ef 92       	push	r14
 156:	ff 92       	push	r15
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	ec 01       	movw	r28, r24
 160:	10 e0       	ldi	r17, 0x00	; 0
 162:	60 ea       	ldi	r22, 0xA0	; 160
 164:	e6 2e       	mov	r14, r22
 166:	6f e0       	ldi	r22, 0x0F	; 15
 168:	f6 2e       	mov	r15, r22
 16a:	06 c0       	rjmp	.+12     	; 0x178 <lcd_string+0x24>
char d=0;

while(str[d]!='\0')
{
lcd_data(str[d]);
 16c:	0e 94 91 00 	call	0x122	; 0x122 <lcd_data>
d++;
 170:	1f 5f       	subi	r17, 0xFF	; 255
 172:	c7 01       	movw	r24, r14
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_string+0x20>

void lcd_string(unsigned char *str)
{
char d=0;

while(str[d]!='\0')
 178:	fe 01       	movw	r30, r28
 17a:	e1 0f       	add	r30, r17
 17c:	f1 1d       	adc	r31, r1
 17e:	80 81       	ld	r24, Z
 180:	88 23       	and	r24, r24
 182:	a1 f7       	brne	.-24     	; 0x16c <lcd_string+0x18>
{
lcd_data(str[d]);
d++;
_delay_ms(1);
}
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	1f 91       	pop	r17
 18a:	ff 90       	pop	r15
 18c:	ef 90       	pop	r14
 18e:	08 95       	ret

00000190 <lcd_number>:



void lcd_number(unsigned int no)
{
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
 194:	8c 01       	movw	r16, r24
lcd_command(0x04);
 196:	84 e0       	ldi	r24, 0x04	; 4
 198:	0e 94 67 00 	call	0xce	; 0xce <lcd_command>
int value=0;
value=no%10;
lcd_data(48+value);
 19c:	c8 01       	movw	r24, r16
 19e:	6a e0       	ldi	r22, 0x0A	; 10
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <__udivmodhi4>
 1a6:	80 5d       	subi	r24, 0xD0	; 208
 1a8:	0e 94 91 00 	call	0x122	; 0x122 <lcd_data>
value=no/10;
lcd_data(48+value);
 1ac:	c8 01       	movw	r24, r16
 1ae:	6a e0       	ldi	r22, 0x0A	; 10
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <__udivmodhi4>
 1b6:	86 2f       	mov	r24, r22
 1b8:	80 5d       	subi	r24, 0xD0	; 208
 1ba:	0e 94 91 00 	call	0x122	; 0x122 <lcd_data>

lcd_command(0x06);
 1be:	86 e0       	ldi	r24, 0x06	; 6
 1c0:	0e 94 67 00 	call	0xce	; 0xce <lcd_command>
}
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	08 95       	ret

000001ca <main>:
#define F_CPU 16000000UL
#include<util/delay.h>
#include<avr/lcd.h>

void main()
{
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	84 bb       	out	0x14, r24	; 20

DDRC=255;
lcd_init();
 1ce:	0e 94 80 00 	call	0x100	; 0x100 <lcd_init>
lcd_command(0x80);
 1d2:	80 e8       	ldi	r24, 0x80	; 128
 1d4:	0e 94 67 00 	call	0xce	; 0xce <lcd_command>
lcd_data('a');
 1d8:	81 e6       	ldi	r24, 0x61	; 97
 1da:	0e 94 91 00 	call	0x122	; 0x122 <lcd_data>

}
 1de:	08 95       	ret

000001e0 <__udivmodhi4>:
 1e0:	aa 1b       	sub	r26, r26
 1e2:	bb 1b       	sub	r27, r27
 1e4:	51 e1       	ldi	r21, 0x11	; 17
 1e6:	07 c0       	rjmp	.+14     	; 0x1f6 <__udivmodhi4_ep>

000001e8 <__udivmodhi4_loop>:
 1e8:	aa 1f       	adc	r26, r26
 1ea:	bb 1f       	adc	r27, r27
 1ec:	a6 17       	cp	r26, r22
 1ee:	b7 07       	cpc	r27, r23
 1f0:	10 f0       	brcs	.+4      	; 0x1f6 <__udivmodhi4_ep>
 1f2:	a6 1b       	sub	r26, r22
 1f4:	b7 0b       	sbc	r27, r23

000001f6 <__udivmodhi4_ep>:
 1f6:	88 1f       	adc	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	5a 95       	dec	r21
 1fc:	a9 f7       	brne	.-22     	; 0x1e8 <__udivmodhi4_loop>
 1fe:	80 95       	com	r24
 200:	90 95       	com	r25
 202:	bc 01       	movw	r22, r24
 204:	cd 01       	movw	r24, r26
 206:	08 95       	ret

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>
