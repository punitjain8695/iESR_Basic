
KeypadLights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000196  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000019a  00000000  00000000  00000225  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000cf  00000000  00000000  000003bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000030a  00000000  00000000  0000048e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000798  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000b6  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000070  00000000  00000000  0000086e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000008de  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e9       	ldi	r30, 0x96	; 150
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 30       	cpi	r26, 0x00	; 0
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 67 00 	call	0xce	; 0xce <main>
  c6:	0c 94 c9 00 	jmp	0x192	; 0x192 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000000ce <main>:
#include<avr/io.h>
#define F_CPU 16000000UL
#include<util/delay.h>

void main()
{
  ce:	6f 92       	push	r6
  d0:	7f 92       	push	r7
  d2:	8f 92       	push	r8
  d4:	9f 92       	push	r9
  d6:	af 92       	push	r10
  d8:	bf 92       	push	r11
  da:	cf 92       	push	r12
  dc:	df 92       	push	r13
  de:	ef 92       	push	r14
  e0:	ff 92       	push	r15
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
DDRD=0xf0;
  e6:	80 ef       	ldi	r24, 0xF0	; 240
  e8:	81 bb       	out	0x11, r24	; 17
DDRB=255;
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	87 bb       	out	0x17, r24	; 23

while(1)
{

PORTD=0xef;
  ee:	af ee       	ldi	r26, 0xEF	; 239
  f0:	6a 2e       	mov	r6, r26
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f2:	20 e4       	ldi	r18, 0x40	; 64
  f4:	3c e9       	ldi	r19, 0x9C	; 156
_delay_ms(10);
if((PIND&0x01)==0x00)
{PORTB=1;
  f6:	77 24       	eor	r7, r7
  f8:	73 94       	inc	r7
}
if((PIND&0x02)==0x00)
{PORTB=2;
  fa:	f2 e0       	ldi	r31, 0x02	; 2
  fc:	8f 2e       	mov	r8, r31
}
if((PIND&0x04)==0x00)
{PORTB=3;
  fe:	e3 e0       	ldi	r30, 0x03	; 3
 100:	9e 2e       	mov	r9, r30
}
if((PIND&0x08)==0x00)
{PORTB=4;
 102:	74 e0       	ldi	r23, 0x04	; 4
 104:	a7 2e       	mov	r10, r23
}

PORTD=0xdf;
 106:	6f ed       	ldi	r22, 0xDF	; 223
 108:	b6 2e       	mov	r11, r22
_delay_ms(10);
if((PIND&0x01)==0x00)
{PORTB=5;
 10a:	55 e0       	ldi	r21, 0x05	; 5
 10c:	c5 2e       	mov	r12, r21
}
if((PIND&0x02)==0x00)
{PORTB=6;
 10e:	46 e0       	ldi	r20, 0x06	; 6
 110:	d4 2e       	mov	r13, r20
}
if((PIND&0x04)==0x00)
{PORTB=7;
 112:	97 e0       	ldi	r25, 0x07	; 7
 114:	e9 2e       	mov	r14, r25
}
if((PIND&0x08)==0x00)
{PORTB=8;
 116:	88 e0       	ldi	r24, 0x08	; 8
 118:	f8 2e       	mov	r15, r24
}

PORTD=0xbf;
 11a:	0f eb       	ldi	r16, 0xBF	; 191
_delay_ms(10);
if((PIND&0x01)==0x00)
{PORTB=9;
 11c:	19 e0       	ldi	r17, 0x09	; 9
}
if((PIND&0x02)==0x00)
{PORTB=10;
 11e:	ba e0       	ldi	r27, 0x0A	; 10
}
if((PIND&0x04)==0x00)
{PORTB=11;
 120:	ab e0       	ldi	r26, 0x0B	; 11
}
if((PIND&0x08)==0x00)
{PORTB=12;
 122:	fc e0       	ldi	r31, 0x0C	; 12
}

PORTD=0x7f;
 124:	ef e7       	ldi	r30, 0x7F	; 127
_delay_ms(10);
if((PIND&0x01)==0x00)
{PORTB=13;
 126:	7d e0       	ldi	r23, 0x0D	; 13
}
if((PIND&0x02)==0x00)
{PORTB=14;
 128:	6e e0       	ldi	r22, 0x0E	; 14
}
if((PIND&0x04)==0x00)
{PORTB=15;
 12a:	5f e0       	ldi	r21, 0x0F	; 15
}
if((PIND&0x08)==0x00)
{PORTB=16;
 12c:	40 e1       	ldi	r20, 0x10	; 16
DDRB=255;

while(1)
{

PORTD=0xef;
 12e:	62 ba       	out	0x12, r6	; 18
 130:	c9 01       	movw	r24, r18
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0x64>
_delay_ms(10);
if((PIND&0x01)==0x00)
 136:	80 9b       	sbis	0x10, 0	; 16
{PORTB=1;
 138:	78 ba       	out	0x18, r7	; 24
}
if((PIND&0x02)==0x00)
 13a:	81 9b       	sbis	0x10, 1	; 16
{PORTB=2;
 13c:	88 ba       	out	0x18, r8	; 24
}
if((PIND&0x04)==0x00)
 13e:	82 9b       	sbis	0x10, 2	; 16
{PORTB=3;
 140:	98 ba       	out	0x18, r9	; 24
}
if((PIND&0x08)==0x00)
 142:	83 9b       	sbis	0x10, 3	; 16
{PORTB=4;
 144:	a8 ba       	out	0x18, r10	; 24
}

PORTD=0xdf;
 146:	b2 ba       	out	0x12, r11	; 18
 148:	c9 01       	movw	r24, r18
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <main+0x7c>
_delay_ms(10);
if((PIND&0x01)==0x00)
 14e:	80 9b       	sbis	0x10, 0	; 16
{PORTB=5;
 150:	c8 ba       	out	0x18, r12	; 24
}
if((PIND&0x02)==0x00)
 152:	81 9b       	sbis	0x10, 1	; 16
{PORTB=6;
 154:	d8 ba       	out	0x18, r13	; 24
}
if((PIND&0x04)==0x00)
 156:	82 9b       	sbis	0x10, 2	; 16
{PORTB=7;
 158:	e8 ba       	out	0x18, r14	; 24
}
if((PIND&0x08)==0x00)
 15a:	83 9b       	sbis	0x10, 3	; 16
{PORTB=8;
 15c:	f8 ba       	out	0x18, r15	; 24
}

PORTD=0xbf;
 15e:	02 bb       	out	0x12, r16	; 18
 160:	c9 01       	movw	r24, r18
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <main+0x94>
_delay_ms(10);
if((PIND&0x01)==0x00)
 166:	80 9b       	sbis	0x10, 0	; 16
{PORTB=9;
 168:	18 bb       	out	0x18, r17	; 24
}
if((PIND&0x02)==0x00)
 16a:	81 9b       	sbis	0x10, 1	; 16
{PORTB=10;
 16c:	b8 bb       	out	0x18, r27	; 24
}
if((PIND&0x04)==0x00)
 16e:	82 9b       	sbis	0x10, 2	; 16
{PORTB=11;
 170:	a8 bb       	out	0x18, r26	; 24
}
if((PIND&0x08)==0x00)
 172:	83 9b       	sbis	0x10, 3	; 16
{PORTB=12;
 174:	f8 bb       	out	0x18, r31	; 24
}

PORTD=0x7f;
 176:	e2 bb       	out	0x12, r30	; 18
 178:	c9 01       	movw	r24, r18
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <main+0xac>
_delay_ms(10);
if((PIND&0x01)==0x00)
 17e:	80 9b       	sbis	0x10, 0	; 16
{PORTB=13;
 180:	78 bb       	out	0x18, r23	; 24
}
if((PIND&0x02)==0x00)
 182:	81 9b       	sbis	0x10, 1	; 16
{PORTB=14;
 184:	68 bb       	out	0x18, r22	; 24
}
if((PIND&0x04)==0x00)
 186:	82 9b       	sbis	0x10, 2	; 16
{PORTB=15;
 188:	58 bb       	out	0x18, r21	; 24
}
if((PIND&0x08)==0x00)
 18a:	83 99       	sbic	0x10, 3	; 16
 18c:	d0 cf       	rjmp	.-96     	; 0x12e <main+0x60>
{PORTB=16;
 18e:	48 bb       	out	0x18, r20	; 24
 190:	ce cf       	rjmp	.-100    	; 0x12e <main+0x60>

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
