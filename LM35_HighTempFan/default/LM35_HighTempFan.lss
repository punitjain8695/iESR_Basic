
LM35_HighTempFan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000002b0  00000324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800110  000002c0  00000334  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000085  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000355  00000000  00000000  000003d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001bb  00000000  00000000  0000072e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000040a  00000000  00000000  000008e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00000cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000010a  00000000  00000000  00000d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d4  00000000  00000000  00000e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00000f62  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 eb       	ldi	r30, 0xB0	; 176
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 31       	cpi	r26, 0x12	; 18
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <main>
  c6:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000000ce <adc_init>:

void adc_init()
{
  ce:	80 e4       	ldi	r24, 0x40	; 64
  d0:	87 b9       	out	0x07, r24	; 7
ADMUX=(1<<REFS0);
ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  d2:	87 e8       	ldi	r24, 0x87	; 135
  d4:	86 b9       	out	0x06, r24	; 6
}
  d6:	08 95       	ret

000000d8 <adc_read>:

unsigned int adc_read(char ch)
{
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	87 b9       	out	0x07, r24	; 7
ADMUX=0x40|ch;
ADCSRA|=(1<<ADSC);
  dc:	36 9a       	sbi	0x06, 6	; 6
while((ADCSRA&0b00010000)==0);
  de:	34 9b       	sbis	0x06, 4	; 6
  e0:	fe cf       	rjmp	.-4      	; 0xde <adc_read+0x6>
ADCSRA|=(1<<ADIF);
  e2:	34 9a       	sbi	0x06, 4	; 6
return ADC;
  e4:	24 b1       	in	r18, 0x04	; 4
  e6:	35 b1       	in	r19, 0x05	; 5
  e8:	c9 01       	movw	r24, r18
  ea:	08 95       	ret

000000ec <lcd_command>:
lcd_command(0X0c);		// screen on cursor off
lcd_command(0X06);		//auto increment
}

void lcd_command(char cmd)
{
  ec:	28 2f       	mov	r18, r24
  ee:	20 7f       	andi	r18, 0xF0	; 240
  f0:	25 bb       	out	0x15, r18	; 21

LCD=(cmd&0xf0);
LCD&=~(1<<rs);
  f2:	a8 98       	cbi	0x15, 0	; 21
LCD&=~(1<<rw);
  f4:	a8 98       	cbi	0x15, 0	; 21
LCD|=(1<<en);
  f6:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f8:	20 e4       	ldi	r18, 0x40	; 64
  fa:	3f e1       	ldi	r19, 0x1F	; 31
  fc:	f9 01       	movw	r30, r18
  fe:	31 97       	sbiw	r30, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <lcd_command+0x12>
_delay_ms(2);		
LCD&=~(1<<en);
 102:	aa 98       	cbi	0x15, 2	; 21

LCD=(cmd<<4)&0xf0;
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	44 e0       	ldi	r20, 0x04	; 4
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	4a 95       	dec	r20
 10e:	e1 f7       	brne	.-8      	; 0x108 <lcd_command+0x1c>
 110:	85 bb       	out	0x15, r24	; 21
LCD|=(1<<en);
 112:	aa 9a       	sbi	0x15, 2	; 21
 114:	c9 01       	movw	r24, r18
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <lcd_command+0x2a>
_delay_ms(2);
LCD&=~(1<<en);
 11a:	aa 98       	cbi	0x15, 2	; 21

}
 11c:	08 95       	ret

0000011e <lcd_init>:
#define LCD PORTC
#define en 2
char *str;

void lcd_init()
{
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 76 00 	call	0xec	; 0xec <lcd_command>
lcd_command(0X02);		// home screen
lcd_command(0X28);		// 4 bit mode
 126:	88 e2       	ldi	r24, 0x28	; 40
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 76 00 	call	0xec	; 0xec <lcd_command>
lcd_command(0X0c);		// screen on cursor off
 12e:	8c e0       	ldi	r24, 0x0C	; 12
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 76 00 	call	0xec	; 0xec <lcd_command>
lcd_command(0X06);		//auto increment
 136:	86 e0       	ldi	r24, 0x06	; 6
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 76 00 	call	0xec	; 0xec <lcd_command>
}
 13e:	08 95       	ret

00000140 <lcd_data>:
LCD&=~(1<<en);

}

void lcd_data(char data)
{
 140:	28 2f       	mov	r18, r24
 142:	20 7f       	andi	r18, 0xF0	; 240
 144:	25 bb       	out	0x15, r18	; 21
LCD=data&0xf0;
LCD|=(1<<rs);
 146:	a8 9a       	sbi	0x15, 0	; 21
LCD|=(1<<en);
 148:	aa 9a       	sbi	0x15, 2	; 21
 14a:	20 e4       	ldi	r18, 0x40	; 64
 14c:	3f e1       	ldi	r19, 0x1F	; 31
 14e:	f9 01       	movw	r30, r18
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_data+0x10>
_delay_ms(2);
LCD&=~(1<<en);
 154:	aa 98       	cbi	0x15, 2	; 21

LCD=(data<<4)&0xf0;
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	54 e0       	ldi	r21, 0x04	; 4
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	5a 95       	dec	r21
 160:	e1 f7       	brne	.-8      	; 0x15a <lcd_data+0x1a>
 162:	85 bb       	out	0x15, r24	; 21
LCD|=(1<<rs);
 164:	a8 9a       	sbi	0x15, 0	; 21
LCD|=(1<<en);
 166:	aa 9a       	sbi	0x15, 2	; 21
 168:	c9 01       	movw	r24, r18
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_data+0x2a>
_delay_ms(2);
LCD&=~(1<<en);
 16e:	aa 98       	cbi	0x15, 2	; 21
}
 170:	08 95       	ret

00000172 <lcd_string>:



void lcd_string(unsigned char *str)
{
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	1f 93       	push	r17
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	ec 01       	movw	r28, r24
 17e:	10 e0       	ldi	r17, 0x00	; 0
 180:	60 ea       	ldi	r22, 0xA0	; 160
 182:	e6 2e       	mov	r14, r22
 184:	6f e0       	ldi	r22, 0x0F	; 15
 186:	f6 2e       	mov	r15, r22
 188:	06 c0       	rjmp	.+12     	; 0x196 <lcd_string+0x24>
char d=0;

while(str[d]!='\0')
{
lcd_data(str[d]);
 18a:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_data>
d++;
 18e:	1f 5f       	subi	r17, 0xFF	; 255
 190:	c7 01       	movw	r24, r14
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_string+0x20>

void lcd_string(unsigned char *str)
{
char d=0;

while(str[d]!='\0')
 196:	fe 01       	movw	r30, r28
 198:	e1 0f       	add	r30, r17
 19a:	f1 1d       	adc	r31, r1
 19c:	80 81       	ld	r24, Z
 19e:	88 23       	and	r24, r24
 1a0:	a1 f7       	brne	.-24     	; 0x18a <lcd_string+0x18>
{
lcd_data(str[d]);
d++;
_delay_ms(1);
}
}
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	1f 91       	pop	r17
 1a8:	ff 90       	pop	r15
 1aa:	ef 90       	pop	r14
 1ac:	08 95       	ret

000001ae <lcd_number>:




void lcd_number(unsigned int no)
{
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	ec 01       	movw	r28, r24

lcd_command(0x04);
 1b4:	84 e0       	ldi	r24, 0x04	; 4
 1b6:	0e 94 76 00 	call	0xec	; 0xec <lcd_command>
int value=0;

if (no==0)
 1ba:	20 97       	sbiw	r28, 0x00	; 0
 1bc:	91 f4       	brne	.+36     	; 0x1e2 <lcd_number+0x34>
	lcd_data('0');
 1be:	80 e3       	ldi	r24, 0x30	; 48
 1c0:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_data>
 1c4:	0e c0       	rjmp	.+28     	; 0x1e2 <lcd_number+0x34>
while(no!=0)
{
	value = no%10;
	lcd_data(48+value);
 1c6:	ce 01       	movw	r24, r28
 1c8:	6a e0       	ldi	r22, 0x0A	; 10
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	0e 94 42 01 	call	0x284	; 0x284 <__udivmodhi4>
 1d0:	80 5d       	subi	r24, 0xD0	; 208
 1d2:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_data>
	no=no/10;
 1d6:	ce 01       	movw	r24, r28
 1d8:	6a e0       	ldi	r22, 0x0A	; 10
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	0e 94 42 01 	call	0x284	; 0x284 <__udivmodhi4>
 1e0:	eb 01       	movw	r28, r22
lcd_command(0x04);
int value=0;

if (no==0)
	lcd_data('0');
while(no!=0)
 1e2:	20 97       	sbiw	r28, 0x00	; 0
 1e4:	81 f7       	brne	.-32     	; 0x1c6 <lcd_number+0x18>
{
	value = no%10;
	lcd_data(48+value);
	no=no/10;
}
lcd_command(0x06);
 1e6:	86 e0       	ldi	r24, 0x06	; 6
 1e8:	0e 94 76 00 	call	0xec	; 0xec <lcd_command>
}
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <main>:
#include<util/delay.h>
#include<avr/adc.h>
#include<avr/lcd.h>

void main()
{
 1f2:	ef 92       	push	r14
 1f4:	ff 92       	push	r15
 1f6:	0f 93       	push	r16
 1f8:	1f 93       	push	r17
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
DDRC=0xff;
 1fe:	9f ef       	ldi	r25, 0xFF	; 255
 200:	94 bb       	out	0x14, r25	; 20
DDRA=0xf0;
 202:	80 ef       	ldi	r24, 0xF0	; 240
 204:	8a bb       	out	0x1a, r24	; 26
DDRB=255;
 206:	97 bb       	out	0x17, r25	; 23
lcd_init();
 208:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_init>
lcd_command(0x80);
 20c:	80 e8       	ldi	r24, 0x80	; 128
 20e:	0e 94 76 00 	call	0xec	; 0xec <lcd_command>
lcd_string("Temp:");
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_string>
lcd_command(0xc0);
 21a:	80 ec       	ldi	r24, 0xC0	; 192
 21c:	0e 94 76 00 	call	0xec	; 0xec <lcd_command>
lcd_string("ADC value");
 220:	86 e0       	ldi	r24, 0x06	; 6
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_string>

void adc_init()
{
ADMUX=(1<<REFS0);
 228:	80 e4       	ldi	r24, 0x40	; 64
 22a:	87 b9       	out	0x07, r24	; 7
ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 22c:	87 e8       	ldi	r24, 0x87	; 135
 22e:	86 b9       	out	0x06, r24	; 6
}

unsigned int adc_read(char ch)
{
ADMUX=0x40|ch;
 230:	e0 e4       	ldi	r30, 0x40	; 64
 232:	ee 2e       	mov	r14, r30

t=(i*500)/1023;

if (i>800)
{
PORTB=0b00000101;
 234:	75 e0       	ldi	r23, 0x05	; 5
 236:	f7 2e       	mov	r15, r23

}
lcd_command(0x8f);
lcd_number(t);
 238:	04 ef       	ldi	r16, 0xF4	; 244
 23a:	11 e0       	ldi	r17, 0x01	; 1
 23c:	e7 b8       	out	0x07, r14	; 7
ADCSRA|=(1<<ADSC);
 23e:	36 9a       	sbi	0x06, 6	; 6
while((ADCSRA&0b00010000)==0);
 240:	34 9b       	sbis	0x06, 4	; 6
 242:	fe cf       	rjmp	.-4      	; 0x240 <main+0x4e>
ADCSRA|=(1<<ADIF);
 244:	34 9a       	sbi	0x06, 4	; 6
return ADC;
 246:	c4 b1       	in	r28, 0x04	; 4
 248:	d5 b1       	in	r29, 0x05	; 5
i=0;
i=adc_read(0);

t=(i*500)/1023;

if (i>800)
 24a:	83 e0       	ldi	r24, 0x03	; 3
 24c:	c1 32       	cpi	r28, 0x21	; 33
 24e:	d8 07       	cpc	r29, r24
 250:	08 f0       	brcs	.+2      	; 0x254 <main+0x62>
{
PORTB=0b00000101;
 252:	f8 ba       	out	0x18, r15	; 24

}
lcd_command(0x8f);
 254:	8f e8       	ldi	r24, 0x8F	; 143
 256:	0e 94 76 00 	call	0xec	; 0xec <lcd_command>
lcd_number(t);
 25a:	c0 9f       	mul	r28, r16
 25c:	c0 01       	movw	r24, r0
 25e:	c1 9f       	mul	r28, r17
 260:	90 0d       	add	r25, r0
 262:	d0 9f       	mul	r29, r16
 264:	90 0d       	add	r25, r0
 266:	11 24       	eor	r1, r1
 268:	6f ef       	ldi	r22, 0xFF	; 255
 26a:	73 e0       	ldi	r23, 0x03	; 3
 26c:	0e 94 42 01 	call	0x284	; 0x284 <__udivmodhi4>
 270:	cb 01       	movw	r24, r22
 272:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_number>
lcd_command(0xcf);
 276:	8f ec       	ldi	r24, 0xCF	; 207
 278:	0e 94 76 00 	call	0xec	; 0xec <lcd_command>
lcd_number(i);
 27c:	ce 01       	movw	r24, r28
 27e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <lcd_number>
 282:	dc cf       	rjmp	.-72     	; 0x23c <main+0x4a>

00000284 <__udivmodhi4>:
 284:	aa 1b       	sub	r26, r26
 286:	bb 1b       	sub	r27, r27
 288:	51 e1       	ldi	r21, 0x11	; 17
 28a:	07 c0       	rjmp	.+14     	; 0x29a <__udivmodhi4_ep>

0000028c <__udivmodhi4_loop>:
 28c:	aa 1f       	adc	r26, r26
 28e:	bb 1f       	adc	r27, r27
 290:	a6 17       	cp	r26, r22
 292:	b7 07       	cpc	r27, r23
 294:	10 f0       	brcs	.+4      	; 0x29a <__udivmodhi4_ep>
 296:	a6 1b       	sub	r26, r22
 298:	b7 0b       	sbc	r27, r23

0000029a <__udivmodhi4_ep>:
 29a:	88 1f       	adc	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	5a 95       	dec	r21
 2a0:	a9 f7       	brne	.-22     	; 0x28c <__udivmodhi4_loop>
 2a2:	80 95       	com	r24
 2a4:	90 95       	com	r25
 2a6:	bc 01       	movw	r22, r24
 2a8:	cd 01       	movw	r24, r26
 2aa:	08 95       	ret

000002ac <_exit>:
 2ac:	f8 94       	cli

000002ae <__stop_program>:
 2ae:	ff cf       	rjmp	.-2      	; 0x2ae <__stop_program>
