
KeypadPassword_a-n.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000478  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000478  000004ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  00800080  00000498  0000050c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000a4  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000494  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000018e  00000000  00000000  00000a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000609  00000000  00000000  00000bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  000011fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000011b  00000000  00000000  0000128c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000227  00000000  00000000  000013a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000015ce  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3a       	cpi	r26, 0xA6	; 166
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1b 02 	call	0x436	; 0x436 <main>
  8a:	0c 94 3a 02 	jmp	0x474	; 0x474 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <lcd_command>:
lcd_command(0X0c);		// screen on cursor off
lcd_command(0X06);		//auto increment
}

void lcd_command(char cmd)
{
  92:	28 2f       	mov	r18, r24
  94:	20 7f       	andi	r18, 0xF0	; 240
  96:	25 bb       	out	0x15, r18	; 21

LCD=(cmd&0xf0);
LCD&=~(1<<rs);
  98:	a8 98       	cbi	0x15, 0	; 21
LCD&=~(1<<rw);
  9a:	a8 98       	cbi	0x15, 0	; 21
LCD|=(1<<en);
  9c:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	20 e4       	ldi	r18, 0x40	; 64
  a0:	3f e1       	ldi	r19, 0x1F	; 31
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_command+0x12>
_delay_ms(2);		
LCD&=~(1<<en);
  a8:	aa 98       	cbi	0x15, 2	; 21

LCD=(cmd<<4)&0xf0;
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	44 e0       	ldi	r20, 0x04	; 4
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	4a 95       	dec	r20
  b4:	e1 f7       	brne	.-8      	; 0xae <lcd_command+0x1c>
  b6:	85 bb       	out	0x15, r24	; 21
LCD|=(1<<en);
  b8:	aa 9a       	sbi	0x15, 2	; 21
  ba:	c9 01       	movw	r24, r18
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcd_command+0x2a>
_delay_ms(2);
LCD&=~(1<<en);
  c0:	aa 98       	cbi	0x15, 2	; 21

}
  c2:	08 95       	ret

000000c4 <lcd_init>:
#define LCD PORTC
#define en 2
char *str;

void lcd_init()
{
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_command(0X02);		// home screen
lcd_command(0X28);		// 4 bit mode
  cc:	88 e2       	ldi	r24, 0x28	; 40
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_command(0X0c);		// screen on cursor off
  d4:	8c e0       	ldi	r24, 0x0C	; 12
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_command(0X06);		//auto increment
  dc:	86 e0       	ldi	r24, 0x06	; 6
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
  e4:	08 95       	ret

000000e6 <lcd_data>:
LCD&=~(1<<en);

}

void lcd_data(char data)
{
  e6:	28 2f       	mov	r18, r24
  e8:	20 7f       	andi	r18, 0xF0	; 240
  ea:	25 bb       	out	0x15, r18	; 21
LCD=data&0xf0;
LCD|=(1<<rs);
  ec:	a8 9a       	sbi	0x15, 0	; 21
LCD|=(1<<en);
  ee:	aa 9a       	sbi	0x15, 2	; 21
  f0:	20 e4       	ldi	r18, 0x40	; 64
  f2:	3f e1       	ldi	r19, 0x1F	; 31
  f4:	f9 01       	movw	r30, r18
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <lcd_data+0x10>
_delay_ms(2);
LCD&=~(1<<en);
  fa:	aa 98       	cbi	0x15, 2	; 21

LCD=(data<<4)&0xf0;
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	54 e0       	ldi	r21, 0x04	; 4
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	5a 95       	dec	r21
 106:	e1 f7       	brne	.-8      	; 0x100 <lcd_data+0x1a>
 108:	85 bb       	out	0x15, r24	; 21
LCD|=(1<<rs);
 10a:	a8 9a       	sbi	0x15, 0	; 21
LCD|=(1<<en);
 10c:	aa 9a       	sbi	0x15, 2	; 21
 10e:	c9 01       	movw	r24, r18
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_data+0x2a>
_delay_ms(2);
LCD&=~(1<<en);
 114:	aa 98       	cbi	0x15, 2	; 21
}
 116:	08 95       	ret

00000118 <lcd_string>:



void lcd_string(unsigned char *str)
{
 118:	ef 92       	push	r14
 11a:	ff 92       	push	r15
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	ec 01       	movw	r28, r24
 124:	10 e0       	ldi	r17, 0x00	; 0
 126:	60 ea       	ldi	r22, 0xA0	; 160
 128:	e6 2e       	mov	r14, r22
 12a:	6f e0       	ldi	r22, 0x0F	; 15
 12c:	f6 2e       	mov	r15, r22
 12e:	06 c0       	rjmp	.+12     	; 0x13c <lcd_string+0x24>
char d=0;

while(str[d]!='\0')
{
lcd_data(str[d]);
 130:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
d++;
 134:	1f 5f       	subi	r17, 0xFF	; 255
 136:	c7 01       	movw	r24, r14
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_string+0x20>

void lcd_string(unsigned char *str)
{
char d=0;

while(str[d]!='\0')
 13c:	fe 01       	movw	r30, r28
 13e:	e1 0f       	add	r30, r17
 140:	f1 1d       	adc	r31, r1
 142:	80 81       	ld	r24, Z
 144:	88 23       	and	r24, r24
 146:	a1 f7       	brne	.-24     	; 0x130 <lcd_string+0x18>
{
lcd_data(str[d]);
d++;
_delay_ms(1);
}
}
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	1f 91       	pop	r17
 14e:	ff 90       	pop	r15
 150:	ef 90       	pop	r14
 152:	08 95       	ret

00000154 <lcd_number>:




void lcd_number(unsigned int no)
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	ec 01       	movw	r28, r24

lcd_command(0x04);
 15a:	84 e0       	ldi	r24, 0x04	; 4
 15c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
int value=0;

if (no==0)
 160:	20 97       	sbiw	r28, 0x00	; 0
 162:	91 f4       	brne	.+36     	; 0x188 <lcd_number+0x34>
	lcd_data('0');
 164:	80 e3       	ldi	r24, 0x30	; 48
 166:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
 16a:	0e c0       	rjmp	.+28     	; 0x188 <lcd_number+0x34>
while(no!=0)
{
	value = no%10;
	lcd_data(48+value);
 16c:	ce 01       	movw	r24, r28
 16e:	6a e0       	ldi	r22, 0x0A	; 10
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	0e 94 26 02 	call	0x44c	; 0x44c <__udivmodhi4>
 176:	80 5d       	subi	r24, 0xD0	; 208
 178:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
	no=no/10;
 17c:	ce 01       	movw	r24, r28
 17e:	6a e0       	ldi	r22, 0x0A	; 10
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	0e 94 26 02 	call	0x44c	; 0x44c <__udivmodhi4>
 186:	eb 01       	movw	r28, r22
lcd_command(0x04);
int value=0;

if (no==0)
	lcd_data('0');
while(no!=0)
 188:	20 97       	sbiw	r28, 0x00	; 0
 18a:	81 f7       	brne	.-32     	; 0x16c <lcd_number+0x18>
{
	value = no%10;
	lcd_data(48+value);
	no=no/10;
}
lcd_command(0x06);
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <button>:
int c=0;
int z=0;


int button(char ch)
{
 198:	98 2f       	mov	r25, r24
int z=0;
while((PIND&ch)==0);
 19a:	80 b3       	in	r24, 0x10	; 16
 19c:	89 23       	and	r24, r25
 19e:	e9 f3       	breq	.-6      	; 0x19a <button+0x2>
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	50 e0       	ldi	r21, 0x00	; 0
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	60 ea       	ldi	r22, 0xA0	; 160
 1aa:	7f e0       	ldi	r23, 0x0F	; 15
 1ac:	fb 01       	movw	r30, r22
 1ae:	31 97       	sbiw	r30, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <button+0x16>
for(int i=0;i<750;i++)
{
_delay_ms(1);
if((PIND&ch)==0)
 1b2:	80 b3       	in	r24, 0x10	; 16
 1b4:	89 23       	and	r24, r25
 1b6:	51 f4       	brne	.+20     	; 0x1cc <button+0x34>
{
while((PIND&ch)==0);
 1b8:	80 b3       	in	r24, 0x10	; 16
 1ba:	89 23       	and	r24, r25
 1bc:	e9 f3       	breq	.-6      	; 0x1b8 <button+0x20>
z++;
 1be:	2f 5f       	subi	r18, 0xFF	; 255
 1c0:	3f 4f       	sbci	r19, 0xFF	; 255
if(z==4){z=0;}
 1c2:	24 30       	cpi	r18, 0x04	; 4
 1c4:	31 05       	cpc	r19, r1
 1c6:	11 f4       	brne	.+4      	; 0x1cc <button+0x34>
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	30 e0       	ldi	r19, 0x00	; 0

int button(char ch)
{
int z=0;
while((PIND&ch)==0);
for(int i=0;i<750;i++)
 1cc:	4f 5f       	subi	r20, 0xFF	; 255
 1ce:	5f 4f       	sbci	r21, 0xFF	; 255
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	4e 3e       	cpi	r20, 0xEE	; 238
 1d4:	58 07       	cpc	r21, r24
 1d6:	51 f7       	brne	.-44     	; 0x1ac <button+0x14>
while((PIND&ch)==0);
z++;
if(z==4){z=0;}
}
}
loc++;
 1d8:	80 91 7f 00 	lds	r24, 0x007F
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	80 93 7f 00 	sts	0x007F, r24
return z;
}
 1e2:	c9 01       	movw	r24, r18
 1e4:	08 95       	ret

000001e6 <passinput>:


void passinput()
{
 1e6:	ef 92       	push	r14
 1e8:	ff 92       	push	r15
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
c=0;
 1f2:	10 92 81 00 	sts	0x0081, r1
 1f6:	10 92 80 00 	sts	0x0080, r1
while(1)
{
z=0;
lcd_command(loc);
//	1st row
PORTD=0xef;
 1fa:	ef ee       	ldi	r30, 0xEF	; 239
 1fc:	fe 2e       	mov	r15, r30
 1fe:	c0 e4       	ldi	r28, 0x40	; 64
 200:	dc e9       	ldi	r29, 0x9C	; 156
lcd_command(loc);
lcd_command(0x06);
}

//	2nd row
PORTD=0xdf;
 202:	7f ed       	ldi	r23, 0xDF	; 223
 204:	e7 2e       	mov	r14, r23
lcd_string("password set");
break;
}

//	3rd row
PORTD=0xbf;
 206:	1f eb       	ldi	r17, 0xBF	; 191
break;}
}
}

//	4th row
PORTD=0x7f;
 208:	0f e7       	ldi	r16, 0x7F	; 127
void passinput()
{
c=0;
while(1)
{
z=0;
 20a:	10 92 83 00 	sts	0x0083, r1
 20e:	10 92 82 00 	sts	0x0082, r1
lcd_command(loc);
 212:	80 91 7f 00 	lds	r24, 0x007F
 216:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
//	1st row
PORTD=0xef;
 21a:	f2 ba       	out	0x12, r15	; 18
 21c:	ce 01       	movw	r24, r28
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <passinput+0x38>
_delay_ms(10);
if((PIND&0x01)==0)
 222:	80 99       	sbic	0x10, 0	; 16
 224:	0f c0       	rjmp	.+30     	; 0x244 <passinput+0x5e>
{
z=button(0x01);
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	0e 94 cc 00 	call	0x198	; 0x198 <button>
 22c:	90 93 83 00 	sts	0x0083, r25
 230:	80 93 82 00 	sts	0x0082, r24
if(z==3){lcd_data(49);}
 234:	83 30       	cpi	r24, 0x03	; 3
 236:	91 05       	cpc	r25, r1
 238:	11 f4       	brne	.+4      	; 0x23e <passinput+0x58>
 23a:	81 e3       	ldi	r24, 0x31	; 49
 23c:	01 c0       	rjmp	.+2      	; 0x240 <passinput+0x5a>
else lcd_data(65+z);
 23e:	8f 5b       	subi	r24, 0xBF	; 191
 240:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
}
if((PIND&0x02)==0)
 244:	81 99       	sbic	0x10, 1	; 16
 246:	0f c0       	rjmp	.+30     	; 0x266 <passinput+0x80>
{
z=button(0x02);
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	0e 94 cc 00 	call	0x198	; 0x198 <button>
 24e:	90 93 83 00 	sts	0x0083, r25
 252:	80 93 82 00 	sts	0x0082, r24
if(z==3){lcd_data(50);}
 256:	83 30       	cpi	r24, 0x03	; 3
 258:	91 05       	cpc	r25, r1
 25a:	11 f4       	brne	.+4      	; 0x260 <passinput+0x7a>
 25c:	82 e3       	ldi	r24, 0x32	; 50
 25e:	01 c0       	rjmp	.+2      	; 0x262 <passinput+0x7c>
else lcd_data(68+z);
 260:	8c 5b       	subi	r24, 0xBC	; 188
 262:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
}
if((PIND&0x04)==0)
 266:	82 99       	sbic	0x10, 2	; 16
 268:	0f c0       	rjmp	.+30     	; 0x288 <passinput+0xa2>
{
z=button(0x04);
 26a:	84 e0       	ldi	r24, 0x04	; 4
 26c:	0e 94 cc 00 	call	0x198	; 0x198 <button>
 270:	90 93 83 00 	sts	0x0083, r25
 274:	80 93 82 00 	sts	0x0082, r24
if(z==3){lcd_data(51);}
 278:	83 30       	cpi	r24, 0x03	; 3
 27a:	91 05       	cpc	r25, r1
 27c:	11 f4       	brne	.+4      	; 0x282 <passinput+0x9c>
 27e:	83 e3       	ldi	r24, 0x33	; 51
 280:	01 c0       	rjmp	.+2      	; 0x284 <passinput+0x9e>
else lcd_data(71+z);
 282:	89 5b       	subi	r24, 0xB9	; 185
 284:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
}
if((PIND&0x08)==0)
 288:	83 99       	sbic	0x10, 3	; 16
 28a:	22 c0       	rjmp	.+68     	; 0x2d0 <passinput+0xea>
{
while((PIND&0x08)==0);
 28c:	83 9b       	sbis	0x10, 3	; 16
 28e:	fe cf       	rjmp	.-4      	; 0x28c <passinput+0xa6>
lcd_command(0x04);
 290:	84 e0       	ldi	r24, 0x04	; 4
 292:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
loc--;
 296:	80 91 7f 00 	lds	r24, 0x007F
 29a:	81 50       	subi	r24, 0x01	; 1
 29c:	80 93 7f 00 	sts	0x007F, r24
c--;
 2a0:	e0 91 80 00 	lds	r30, 0x0080
 2a4:	f0 91 81 00 	lds	r31, 0x0081
 2a8:	31 97       	sbiw	r30, 0x01	; 1
 2aa:	f0 93 81 00 	sts	0x0081, r31
 2ae:	e0 93 80 00 	sts	0x0080, r30
A[c]='\0';
 2b2:	ec 57       	subi	r30, 0x7C	; 124
 2b4:	ff 4f       	sbci	r31, 0xFF	; 255
 2b6:	10 82       	st	Z, r1
lcd_command(loc);
 2b8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_data(' ');
 2bc:	80 e2       	ldi	r24, 0x20	; 32
 2be:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
lcd_command(loc);
 2c2:	80 91 7f 00 	lds	r24, 0x007F
 2c6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_command(0x06);
 2ca:	86 e0       	ldi	r24, 0x06	; 6
 2cc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}

//	2nd row
PORTD=0xdf;
 2d0:	e2 ba       	out	0x12, r14	; 18
 2d2:	ce 01       	movw	r24, r28
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <passinput+0xee>
_delay_ms(10);
if((PIND&0x01)==0)
 2d8:	80 99       	sbic	0x10, 0	; 16
 2da:	0f c0       	rjmp	.+30     	; 0x2fa <passinput+0x114>
{
z=button(0x01);
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	0e 94 cc 00 	call	0x198	; 0x198 <button>
 2e2:	90 93 83 00 	sts	0x0083, r25
 2e6:	80 93 82 00 	sts	0x0082, r24
if(z==3){lcd_data(52);}
 2ea:	83 30       	cpi	r24, 0x03	; 3
 2ec:	91 05       	cpc	r25, r1
 2ee:	11 f4       	brne	.+4      	; 0x2f4 <passinput+0x10e>
 2f0:	84 e3       	ldi	r24, 0x34	; 52
 2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <passinput+0x110>
else lcd_data(74+z);
 2f4:	86 5b       	subi	r24, 0xB6	; 182
 2f6:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
}
if((PIND&0x02)==0)
 2fa:	81 99       	sbic	0x10, 1	; 16
 2fc:	0f c0       	rjmp	.+30     	; 0x31c <passinput+0x136>
{
z=button(0x02);
 2fe:	82 e0       	ldi	r24, 0x02	; 2
 300:	0e 94 cc 00 	call	0x198	; 0x198 <button>
 304:	90 93 83 00 	sts	0x0083, r25
 308:	80 93 82 00 	sts	0x0082, r24
if(z==3){lcd_data(53);}
 30c:	83 30       	cpi	r24, 0x03	; 3
 30e:	91 05       	cpc	r25, r1
 310:	11 f4       	brne	.+4      	; 0x316 <passinput+0x130>
 312:	85 e3       	ldi	r24, 0x35	; 53
 314:	01 c0       	rjmp	.+2      	; 0x318 <passinput+0x132>
else lcd_data(77+z);
 316:	83 5b       	subi	r24, 0xB3	; 179
 318:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
}
if((PIND&0x04)==0)
 31c:	82 99       	sbic	0x10, 2	; 16
 31e:	62 c0       	rjmp	.+196    	; 0x3e4 <passinput+0x1fe>
{
z=button(0x04);
 320:	84 e0       	ldi	r24, 0x04	; 4
 322:	0e 94 cc 00 	call	0x198	; 0x198 <button>
 326:	90 93 83 00 	sts	0x0083, r25
 32a:	80 93 82 00 	sts	0x0082, r24
if(z==3){lcd_data(54);}
 32e:	83 30       	cpi	r24, 0x03	; 3
 330:	91 05       	cpc	r25, r1
 332:	11 f4       	brne	.+4      	; 0x338 <passinput+0x152>
 334:	86 e3       	ldi	r24, 0x36	; 54
 336:	01 c0       	rjmp	.+2      	; 0x33a <passinput+0x154>
else lcd_data(80+z);
 338:	80 5b       	subi	r24, 0xB0	; 176
 33a:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
if((PIND&0x08)==0)
 33e:	83 99       	sbic	0x10, 3	; 16
 340:	08 c0       	rjmp	.+16     	; 0x352 <passinput+0x16c>
{
while((PIND&0x08)==0);
 342:	83 9b       	sbis	0x10, 3	; 16
 344:	fe cf       	rjmp	.-4      	; 0x342 <passinput+0x15c>
lcd_command(0x80);
 346:	80 e8       	ldi	r24, 0x80	; 128
 348:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_string("password set");
 34c:	80 e6       	ldi	r24, 0x60	; 96
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	40 c0       	rjmp	.+128    	; 0x3d2 <passinput+0x1ec>
break;
}

//	3rd row
PORTD=0xbf;
 352:	12 bb       	out	0x12, r17	; 18
 354:	ce 01       	movw	r24, r28
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <passinput+0x170>
_delay_ms(10);
if((PIND&0x01)==0)
 35a:	80 99       	sbic	0x10, 0	; 16
 35c:	0f c0       	rjmp	.+30     	; 0x37c <passinput+0x196>
{
z=button(0x01);
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	0e 94 cc 00 	call	0x198	; 0x198 <button>
 364:	90 93 83 00 	sts	0x0083, r25
 368:	80 93 82 00 	sts	0x0082, r24
if(z==3){lcd_data(55);}
 36c:	83 30       	cpi	r24, 0x03	; 3
 36e:	91 05       	cpc	r25, r1
 370:	11 f4       	brne	.+4      	; 0x376 <passinput+0x190>
 372:	87 e3       	ldi	r24, 0x37	; 55
 374:	01 c0       	rjmp	.+2      	; 0x378 <passinput+0x192>
else lcd_data(83+z);
 376:	8d 5a       	subi	r24, 0xAD	; 173
 378:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
}
if((PIND&0x02)==0)
 37c:	81 99       	sbic	0x10, 1	; 16
 37e:	0f c0       	rjmp	.+30     	; 0x39e <passinput+0x1b8>
{
z=button(0x02);
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	0e 94 cc 00 	call	0x198	; 0x198 <button>
 386:	90 93 83 00 	sts	0x0083, r25
 38a:	80 93 82 00 	sts	0x0082, r24
if(z==3){lcd_data(56);}
 38e:	83 30       	cpi	r24, 0x03	; 3
 390:	91 05       	cpc	r25, r1
 392:	11 f4       	brne	.+4      	; 0x398 <passinput+0x1b2>
 394:	88 e3       	ldi	r24, 0x38	; 56
 396:	01 c0       	rjmp	.+2      	; 0x39a <passinput+0x1b4>
else lcd_data(86+z);
 398:	8a 5a       	subi	r24, 0xAA	; 170
 39a:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
}
if((PIND&0x04)==0)
 39e:	82 99       	sbic	0x10, 2	; 16
 3a0:	21 c0       	rjmp	.+66     	; 0x3e4 <passinput+0x1fe>
{
z=button(0x04);
 3a2:	84 e0       	ldi	r24, 0x04	; 4
 3a4:	0e 94 cc 00 	call	0x198	; 0x198 <button>
 3a8:	90 93 83 00 	sts	0x0083, r25
 3ac:	80 93 82 00 	sts	0x0082, r24
if(z==2){lcd_data(57);}
 3b0:	82 30       	cpi	r24, 0x02	; 2
 3b2:	91 05       	cpc	r25, r1
 3b4:	11 f4       	brne	.+4      	; 0x3ba <passinput+0x1d4>
 3b6:	89 e3       	ldi	r24, 0x39	; 57
 3b8:	01 c0       	rjmp	.+2      	; 0x3bc <passinput+0x1d6>
else lcd_data(89+z);
 3ba:	87 5a       	subi	r24, 0xA7	; 167
 3bc:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
if((PIND&0x08)==0)
 3c0:	83 99       	sbic	0x10, 3	; 16
 3c2:	10 c0       	rjmp	.+32     	; 0x3e4 <passinput+0x1fe>
{
while((PIND&0x08)==0);
 3c4:	83 9b       	sbis	0x10, 3	; 16
 3c6:	fe cf       	rjmp	.-4      	; 0x3c4 <passinput+0x1de>
lcd_command(0x80);
 3c8:	80 e8       	ldi	r24, 0x80	; 128
 3ca:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_string("Checking password");
 3ce:	8d e6       	ldi	r24, 0x6D	; 109
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_string>
z=button(0x04);
lcd_data('#');
}

}
}
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	1f 91       	pop	r17
 3dc:	0f 91       	pop	r16
 3de:	ff 90       	pop	r15
 3e0:	ef 90       	pop	r14
 3e2:	08 95       	ret
break;}
}
}

//	4th row
PORTD=0x7f;
 3e4:	02 bb       	out	0x12, r16	; 18
 3e6:	ce 01       	movw	r24, r28
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <passinput+0x202>
_delay_ms(10);
if((PIND&0x01)==0)
 3ec:	80 99       	sbic	0x10, 0	; 16
 3ee:	0a c0       	rjmp	.+20     	; 0x404 <passinput+0x21e>
{
z=button(0x01);
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	0e 94 cc 00 	call	0x198	; 0x198 <button>
 3f6:	90 93 83 00 	sts	0x0083, r25
 3fa:	80 93 82 00 	sts	0x0082, r24
lcd_data('*');
 3fe:	8a e2       	ldi	r24, 0x2A	; 42
 400:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
}
if((PIND&0x02)==0)
 404:	81 99       	sbic	0x10, 1	; 16
 406:	0a c0       	rjmp	.+20     	; 0x41c <passinput+0x236>
{
z=button(0x02);
 408:	82 e0       	ldi	r24, 0x02	; 2
 40a:	0e 94 cc 00 	call	0x198	; 0x198 <button>
 40e:	90 93 83 00 	sts	0x0083, r25
 412:	80 93 82 00 	sts	0x0082, r24
lcd_data(48);
 416:	80 e3       	ldi	r24, 0x30	; 48
 418:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
}
if((PIND&0x04)==0)
 41c:	82 99       	sbic	0x10, 2	; 16
 41e:	f5 ce       	rjmp	.-534    	; 0x20a <passinput+0x24>
{
z=button(0x04);
 420:	84 e0       	ldi	r24, 0x04	; 4
 422:	0e 94 cc 00 	call	0x198	; 0x198 <button>
 426:	90 93 83 00 	sts	0x0083, r25
 42a:	80 93 82 00 	sts	0x0082, r24
lcd_data('#');
 42e:	83 e2       	ldi	r24, 0x23	; 35
 430:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
 434:	ea ce       	rjmp	.-556    	; 0x20a <passinput+0x24>

00000436 <main>:

}
}

void main()
{
 436:	80 ef       	ldi	r24, 0xF0	; 240
 438:	81 bb       	out	0x11, r24	; 17

DDRD=0xf0;
DDRC=255;
 43a:	8f ef       	ldi	r24, 0xFF	; 255
 43c:	84 bb       	out	0x14, r24	; 20
lcd_init();
 43e:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_init>
PORTD=0xef;
 442:	8f ee       	ldi	r24, 0xEF	; 239
 444:	82 bb       	out	0x12, r24	; 18

passinput();
 446:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <passinput>

}
 44a:	08 95       	ret

0000044c <__udivmodhi4>:
 44c:	aa 1b       	sub	r26, r26
 44e:	bb 1b       	sub	r27, r27
 450:	51 e1       	ldi	r21, 0x11	; 17
 452:	07 c0       	rjmp	.+14     	; 0x462 <__udivmodhi4_ep>

00000454 <__udivmodhi4_loop>:
 454:	aa 1f       	adc	r26, r26
 456:	bb 1f       	adc	r27, r27
 458:	a6 17       	cp	r26, r22
 45a:	b7 07       	cpc	r27, r23
 45c:	10 f0       	brcs	.+4      	; 0x462 <__udivmodhi4_ep>
 45e:	a6 1b       	sub	r26, r22
 460:	b7 0b       	sbc	r27, r23

00000462 <__udivmodhi4_ep>:
 462:	88 1f       	adc	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	5a 95       	dec	r21
 468:	a9 f7       	brne	.-22     	; 0x454 <__udivmodhi4_loop>
 46a:	80 95       	com	r24
 46c:	90 95       	com	r25
 46e:	bc 01       	movw	r22, r24
 470:	cd 01       	movw	r24, r26
 472:	08 95       	ret

00000474 <_exit>:
 474:	f8 94       	cli

00000476 <__stop_program>:
 476:	ff cf       	rjmp	.-2      	; 0x476 <__stop_program>
