
Calculator1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000062c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000062c  000006a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080006e  0000063a  000006ae  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000006ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000c8  00000000  00000000  000006ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000589  00000000  00000000  00000796  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001d4  00000000  00000000  00000d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006fa  00000000  00000000  00000ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  000015f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000011f  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000319  00000000  00000000  0000179f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00001ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e2       	ldi	r30, 0x2C	; 44
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 37       	cpi	r26, 0x7F	; 127
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c8 01 	call	0x390	; 0x390 <main>
  8a:	0c 94 14 03 	jmp	0x628	; 0x628 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_command>:
lcd_command(0X0c);		// screen on cursor off
lcd_command(0X06);		//auto increment
}

void lcd_command(char cmd)
{
  92:	28 2f       	mov	r18, r24
  94:	20 7f       	andi	r18, 0xF0	; 240
  96:	25 bb       	out	0x15, r18	; 21

LCD=(cmd&0xf0);
LCD&=~(1<<rs);
  98:	a8 98       	cbi	0x15, 0	; 21
LCD&=~(1<<rw);
  9a:	a8 98       	cbi	0x15, 0	; 21
LCD|=(1<<en);
  9c:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9e:	20 e4       	ldi	r18, 0x40	; 64
  a0:	3f e1       	ldi	r19, 0x1F	; 31
  a2:	f9 01       	movw	r30, r18
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_command+0x12>
_delay_ms(2);		
LCD&=~(1<<en);
  a8:	aa 98       	cbi	0x15, 2	; 21

LCD=(cmd<<4)&0xf0;
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	44 e0       	ldi	r20, 0x04	; 4
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	4a 95       	dec	r20
  b4:	e1 f7       	brne	.-8      	; 0xae <lcd_command+0x1c>
  b6:	85 bb       	out	0x15, r24	; 21
LCD|=(1<<en);
  b8:	aa 9a       	sbi	0x15, 2	; 21
  ba:	c9 01       	movw	r24, r18
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcd_command+0x2a>
_delay_ms(2);
LCD&=~(1<<en);
  c0:	aa 98       	cbi	0x15, 2	; 21

}
  c2:	08 95       	ret

000000c4 <lcd_init>:
#define LCD PORTC
#define en 2
char *str;

void lcd_init()
{
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_command(0X02);		// home screen
lcd_command(0X28);		// 4 bit mode
  cc:	88 e2       	ldi	r24, 0x28	; 40
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_command(0X0c);		// screen on cursor off
  d4:	8c e0       	ldi	r24, 0x0C	; 12
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_command(0X06);		//auto increment
  dc:	86 e0       	ldi	r24, 0x06	; 6
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
  e4:	08 95       	ret

000000e6 <lcd_data>:
LCD&=~(1<<en);

}

void lcd_data(char data)
{
  e6:	28 2f       	mov	r18, r24
  e8:	20 7f       	andi	r18, 0xF0	; 240
  ea:	25 bb       	out	0x15, r18	; 21
LCD=data&0xf0;
LCD|=(1<<rs);
  ec:	a8 9a       	sbi	0x15, 0	; 21
LCD|=(1<<en);
  ee:	aa 9a       	sbi	0x15, 2	; 21
  f0:	20 e4       	ldi	r18, 0x40	; 64
  f2:	3f e1       	ldi	r19, 0x1F	; 31
  f4:	f9 01       	movw	r30, r18
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <lcd_data+0x10>
_delay_ms(2);
LCD&=~(1<<en);
  fa:	aa 98       	cbi	0x15, 2	; 21

LCD=(data<<4)&0xf0;
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	54 e0       	ldi	r21, 0x04	; 4
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	5a 95       	dec	r21
 106:	e1 f7       	brne	.-8      	; 0x100 <lcd_data+0x1a>
 108:	85 bb       	out	0x15, r24	; 21
LCD|=(1<<rs);
 10a:	a8 9a       	sbi	0x15, 0	; 21
LCD|=(1<<en);
 10c:	aa 9a       	sbi	0x15, 2	; 21
 10e:	c9 01       	movw	r24, r18
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_data+0x2a>
_delay_ms(2);
LCD&=~(1<<en);
 114:	aa 98       	cbi	0x15, 2	; 21
}
 116:	08 95       	ret

00000118 <lcd_string>:



void lcd_string(unsigned char *str)
{
 118:	ef 92       	push	r14
 11a:	ff 92       	push	r15
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	ec 01       	movw	r28, r24
 124:	10 e0       	ldi	r17, 0x00	; 0
 126:	60 ea       	ldi	r22, 0xA0	; 160
 128:	e6 2e       	mov	r14, r22
 12a:	6f e0       	ldi	r22, 0x0F	; 15
 12c:	f6 2e       	mov	r15, r22
 12e:	06 c0       	rjmp	.+12     	; 0x13c <lcd_string+0x24>
char d=0;

while(str[d]!='\0')
{
lcd_data(str[d]);
 130:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
d++;
 134:	1f 5f       	subi	r17, 0xFF	; 255
 136:	c7 01       	movw	r24, r14
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_string+0x20>

void lcd_string(unsigned char *str)
{
char d=0;

while(str[d]!='\0')
 13c:	fe 01       	movw	r30, r28
 13e:	e1 0f       	add	r30, r17
 140:	f1 1d       	adc	r31, r1
 142:	80 81       	ld	r24, Z
 144:	88 23       	and	r24, r24
 146:	a1 f7       	brne	.-24     	; 0x130 <lcd_string+0x18>
{
lcd_data(str[d]);
d++;
_delay_ms(1);
}
}
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	1f 91       	pop	r17
 14e:	ff 90       	pop	r15
 150:	ef 90       	pop	r14
 152:	08 95       	ret

00000154 <lcd_number>:




void lcd_number(unsigned int no)
{
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	ec 01       	movw	r28, r24

lcd_command(0x04);
 15a:	84 e0       	ldi	r24, 0x04	; 4
 15c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
int value=0;

if (no==0)
 160:	20 97       	sbiw	r28, 0x00	; 0
 162:	91 f4       	brne	.+36     	; 0x188 <lcd_number+0x34>
	lcd_data('0');
 164:	80 e3       	ldi	r24, 0x30	; 48
 166:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
 16a:	0e c0       	rjmp	.+28     	; 0x188 <lcd_number+0x34>
while(no!=0)
{
	value = no%10;
	lcd_data(48+value);
 16c:	ce 01       	movw	r24, r28
 16e:	6a e0       	ldi	r22, 0x0A	; 10
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	0e 94 ed 02 	call	0x5da	; 0x5da <__udivmodhi4>
 176:	80 5d       	subi	r24, 0xD0	; 208
 178:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
	no=no/10;
 17c:	ce 01       	movw	r24, r28
 17e:	6a e0       	ldi	r22, 0x0A	; 10
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	0e 94 ed 02 	call	0x5da	; 0x5da <__udivmodhi4>
 186:	eb 01       	movw	r28, r22
lcd_command(0x04);
int value=0;

if (no==0)
	lcd_data('0');
while(no!=0)
 188:	20 97       	sbiw	r28, 0x00	; 0
 18a:	81 f7       	brne	.-32     	; 0x16c <lcd_number+0x18>
{
	value = no%10;
	lcd_data(48+value);
	no=no/10;
}
lcd_command(0x06);
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
}
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <getcha>:
char A[maxsize]={0},B[maxsize]={0};
char a=0,b=0,choice=0;
int num1=0,num2=0,ans=0,i=0,j=0;

char getcha()
{
 198:	8f ee       	ldi	r24, 0xEF	; 239
 19a:	8b bb       	out	0x1b, r24	; 27
 19c:	80 e4       	ldi	r24, 0x40	; 64
 19e:	9c e9       	ldi	r25, 0x9C	; 156
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <getcha+0x8>

//1st row

PORTA=0xef;
_delay_ms(10);
if((PINA&0x01)==0x00)
 1a4:	c8 9b       	sbis	0x19, 0	; 25
 1a6:	03 c0       	rjmp	.+6      	; 0x1ae <getcha+0x16>
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	06 c0       	rjmp	.+12     	; 0x1ba <getcha+0x22>
{
while((PINA&0x01)==0x00);
 1ae:	c8 9b       	sbis	0x19, 0	; 25
 1b0:	fe cf       	rjmp	.-4      	; 0x1ae <getcha+0x16>
PORTB=1;
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	88 bb       	out	0x18, r24	; 24
 1b6:	21 e3       	ldi	r18, 0x31	; 49
 1b8:	30 e0       	ldi	r19, 0x00	; 0
a = (49);
}
if((PINA&0x02)==0x00)
 1ba:	c9 99       	sbic	0x19, 1	; 25
 1bc:	06 c0       	rjmp	.+12     	; 0x1ca <getcha+0x32>
{
while((PINA&0x02)==0x00);
 1be:	c9 9b       	sbis	0x19, 1	; 25
 1c0:	fe cf       	rjmp	.-4      	; 0x1be <getcha+0x26>
PORTB=2;
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	88 bb       	out	0x18, r24	; 24
 1c6:	22 e3       	ldi	r18, 0x32	; 50
 1c8:	30 e0       	ldi	r19, 0x00	; 0
a = (50);
}
if((PINA&0x04)==0x00)
 1ca:	ca 99       	sbic	0x19, 2	; 25
 1cc:	06 c0       	rjmp	.+12     	; 0x1da <getcha+0x42>
{
while((PINA&0x04)==0x00);
 1ce:	ca 9b       	sbis	0x19, 2	; 25
 1d0:	fe cf       	rjmp	.-4      	; 0x1ce <getcha+0x36>
PORTB=3;
 1d2:	83 e0       	ldi	r24, 0x03	; 3
 1d4:	88 bb       	out	0x18, r24	; 24
 1d6:	23 e3       	ldi	r18, 0x33	; 51
 1d8:	30 e0       	ldi	r19, 0x00	; 0
a = (51);
}
if((PINA&0x08)==0x00)
 1da:	cb 99       	sbic	0x19, 3	; 25
 1dc:	06 c0       	rjmp	.+12     	; 0x1ea <getcha+0x52>
{
while((PINA&0x08)==0x00);
 1de:	cb 9b       	sbis	0x19, 3	; 25
 1e0:	fe cf       	rjmp	.-4      	; 0x1de <getcha+0x46>
PORTB=4;
 1e2:	84 e0       	ldi	r24, 0x04	; 4
 1e4:	88 bb       	out	0x18, r24	; 24
 1e6:	2b e2       	ldi	r18, 0x2B	; 43
 1e8:	30 e0       	ldi	r19, 0x00	; 0
a = ('+');
}

//2nd row

PORTA=0xdf;
 1ea:	8f ed       	ldi	r24, 0xDF	; 223
 1ec:	8b bb       	out	0x1b, r24	; 27
 1ee:	80 e4       	ldi	r24, 0x40	; 64
 1f0:	9c e9       	ldi	r25, 0x9C	; 156
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <getcha+0x5a>
_delay_ms(10);
if((PINA&0x01)==0x00)
 1f6:	c8 99       	sbic	0x19, 0	; 25
 1f8:	06 c0       	rjmp	.+12     	; 0x206 <getcha+0x6e>
{
while((PINA&0x01)==0x00);
 1fa:	c8 9b       	sbis	0x19, 0	; 25
 1fc:	fe cf       	rjmp	.-4      	; 0x1fa <getcha+0x62>
PORTB=5;
 1fe:	85 e0       	ldi	r24, 0x05	; 5
 200:	88 bb       	out	0x18, r24	; 24
 202:	24 e3       	ldi	r18, 0x34	; 52
 204:	30 e0       	ldi	r19, 0x00	; 0
a = (52);
}
if((PINA&0x02)==0x00)
 206:	c9 99       	sbic	0x19, 1	; 25
 208:	06 c0       	rjmp	.+12     	; 0x216 <getcha+0x7e>
{
while((PINA&0x02)==0x00);
 20a:	c9 9b       	sbis	0x19, 1	; 25
 20c:	fe cf       	rjmp	.-4      	; 0x20a <getcha+0x72>
PORTB=6;
 20e:	86 e0       	ldi	r24, 0x06	; 6
 210:	88 bb       	out	0x18, r24	; 24
 212:	25 e3       	ldi	r18, 0x35	; 53
 214:	30 e0       	ldi	r19, 0x00	; 0
a = (53);
}
if((PINA&0x04)==0x00)
 216:	ca 99       	sbic	0x19, 2	; 25
 218:	06 c0       	rjmp	.+12     	; 0x226 <getcha+0x8e>
{
while((PINA&0x04)==0x00);
 21a:	ca 9b       	sbis	0x19, 2	; 25
 21c:	fe cf       	rjmp	.-4      	; 0x21a <getcha+0x82>
PORTB=7;
 21e:	87 e0       	ldi	r24, 0x07	; 7
 220:	88 bb       	out	0x18, r24	; 24
 222:	26 e3       	ldi	r18, 0x36	; 54
 224:	30 e0       	ldi	r19, 0x00	; 0
a = (54);
}
if((PINA&0x08)==0x00)
 226:	cb 99       	sbic	0x19, 3	; 25
 228:	06 c0       	rjmp	.+12     	; 0x236 <getcha+0x9e>
{
while((PINA&0x08)==0x00);
 22a:	cb 9b       	sbis	0x19, 3	; 25
 22c:	fe cf       	rjmp	.-4      	; 0x22a <getcha+0x92>
PORTB=8;
 22e:	88 e0       	ldi	r24, 0x08	; 8
 230:	88 bb       	out	0x18, r24	; 24
 232:	2d e2       	ldi	r18, 0x2D	; 45
 234:	30 e0       	ldi	r19, 0x00	; 0
a = ('-');
}
//3rd row

PORTA=0xbf;
 236:	8f eb       	ldi	r24, 0xBF	; 191
 238:	8b bb       	out	0x1b, r24	; 27
 23a:	80 e4       	ldi	r24, 0x40	; 64
 23c:	9c e9       	ldi	r25, 0x9C	; 156
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <getcha+0xa6>
_delay_ms(10);
if((PINA&0x01)==0x00)
 242:	c8 99       	sbic	0x19, 0	; 25
 244:	06 c0       	rjmp	.+12     	; 0x252 <getcha+0xba>
{
while((PINA&0x01)==0x00);
 246:	c8 9b       	sbis	0x19, 0	; 25
 248:	fe cf       	rjmp	.-4      	; 0x246 <getcha+0xae>
PORTB=9;
 24a:	89 e0       	ldi	r24, 0x09	; 9
 24c:	88 bb       	out	0x18, r24	; 24
 24e:	27 e3       	ldi	r18, 0x37	; 55
 250:	30 e0       	ldi	r19, 0x00	; 0
a = (55);
}
if((PINA&0x02)==0x00)
 252:	c9 99       	sbic	0x19, 1	; 25
 254:	06 c0       	rjmp	.+12     	; 0x262 <getcha+0xca>
{
while((PINA&0x02)==0x00);
 256:	c9 9b       	sbis	0x19, 1	; 25
 258:	fe cf       	rjmp	.-4      	; 0x256 <getcha+0xbe>
PORTB=10;
 25a:	8a e0       	ldi	r24, 0x0A	; 10
 25c:	88 bb       	out	0x18, r24	; 24
 25e:	28 e3       	ldi	r18, 0x38	; 56
 260:	30 e0       	ldi	r19, 0x00	; 0
a = (56);
}
if((PINA&0x04)==0x00)
 262:	ca 99       	sbic	0x19, 2	; 25
 264:	06 c0       	rjmp	.+12     	; 0x272 <getcha+0xda>
{
while((PINA&0x04)==0x00);
 266:	ca 9b       	sbis	0x19, 2	; 25
 268:	fe cf       	rjmp	.-4      	; 0x266 <getcha+0xce>
PORTB=11;
 26a:	8b e0       	ldi	r24, 0x0B	; 11
 26c:	88 bb       	out	0x18, r24	; 24
 26e:	29 e3       	ldi	r18, 0x39	; 57
 270:	30 e0       	ldi	r19, 0x00	; 0
a = (57);
}
if((PINA&0x08)==0x00)
 272:	cb 99       	sbic	0x19, 3	; 25
 274:	06 c0       	rjmp	.+12     	; 0x282 <getcha+0xea>
{
while((PINA&0x08)==0x00);
 276:	cb 9b       	sbis	0x19, 3	; 25
 278:	fe cf       	rjmp	.-4      	; 0x276 <getcha+0xde>
PORTB=12;
 27a:	8c e0       	ldi	r24, 0x0C	; 12
 27c:	88 bb       	out	0x18, r24	; 24
 27e:	2f e2       	ldi	r18, 0x2F	; 47
 280:	30 e0       	ldi	r19, 0x00	; 0
a = ('/');
}
//4th row

PORTA=0x7f;
 282:	8f e7       	ldi	r24, 0x7F	; 127
 284:	8b bb       	out	0x1b, r24	; 27
 286:	80 e4       	ldi	r24, 0x40	; 64
 288:	9c e9       	ldi	r25, 0x9C	; 156
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <getcha+0xf2>
_delay_ms(10);
if((PINA&0x01)==0x00)
 28e:	c8 99       	sbic	0x19, 0	; 25
 290:	06 c0       	rjmp	.+12     	; 0x29e <getcha+0x106>
{
while((PINA&0x01)==0x00);
 292:	c8 9b       	sbis	0x19, 0	; 25
 294:	fe cf       	rjmp	.-4      	; 0x292 <getcha+0xfa>
PORTB=13;
 296:	8d e0       	ldi	r24, 0x0D	; 13
 298:	88 bb       	out	0x18, r24	; 24
 29a:	23 e4       	ldi	r18, 0x43	; 67
 29c:	30 e0       	ldi	r19, 0x00	; 0
a = (67);
}
if((PINA&0x02)==0x00)
 29e:	c9 99       	sbic	0x19, 1	; 25
 2a0:	06 c0       	rjmp	.+12     	; 0x2ae <getcha+0x116>
{
while((PINA&0x02)==0x00);
 2a2:	c9 9b       	sbis	0x19, 1	; 25
 2a4:	fe cf       	rjmp	.-4      	; 0x2a2 <getcha+0x10a>
PORTB=14;
 2a6:	8e e0       	ldi	r24, 0x0E	; 14
 2a8:	88 bb       	out	0x18, r24	; 24
 2aa:	20 e3       	ldi	r18, 0x30	; 48
 2ac:	30 e0       	ldi	r19, 0x00	; 0
a = (48);
}
if((PINA&0x04)==0x00)
 2ae:	ca 99       	sbic	0x19, 2	; 25
 2b0:	06 c0       	rjmp	.+12     	; 0x2be <getcha+0x126>
{
while((PINA&0x04)==0x00);
 2b2:	ca 9b       	sbis	0x19, 2	; 25
 2b4:	fe cf       	rjmp	.-4      	; 0x2b2 <getcha+0x11a>
PORTB=15;
 2b6:	8f e0       	ldi	r24, 0x0F	; 15
 2b8:	88 bb       	out	0x18, r24	; 24
 2ba:	2d e3       	ldi	r18, 0x3D	; 61
 2bc:	30 e0       	ldi	r19, 0x00	; 0
a = ('=');
}
if((PINA&0x08)==0x00)
 2be:	cb 99       	sbic	0x19, 3	; 25
 2c0:	06 c0       	rjmp	.+12     	; 0x2ce <getcha+0x136>
{
while((PINA&0x08)==0x00);
 2c2:	cb 9b       	sbis	0x19, 3	; 25
 2c4:	fe cf       	rjmp	.-4      	; 0x2c2 <getcha+0x12a>
PORTB=16;
 2c6:	80 e1       	ldi	r24, 0x10	; 16
 2c8:	88 bb       	out	0x18, r24	; 24
 2ca:	2a e2       	ldi	r18, 0x2A	; 42
 2cc:	30 e0       	ldi	r19, 0x00	; 0
a = ('*');
}


return a;
}
 2ce:	82 2f       	mov	r24, r18
 2d0:	08 95       	ret

000002d2 <calc>:

calc()
{
 2d2:	80 91 72 00 	lds	r24, 0x0072
 2d6:	8b 32       	cpi	r24, 0x2B	; 43
 2d8:	61 f0       	breq	.+24     	; 0x2f2 <calc+0x20>
 2da:	8c 32       	cpi	r24, 0x2C	; 44
 2dc:	20 f4       	brcc	.+8      	; 0x2e6 <calc+0x14>
 2de:	8a 32       	cpi	r24, 0x2A	; 42
 2e0:	09 f0       	breq	.+2      	; 0x2e4 <calc+0x12>
 2e2:	55 c0       	rjmp	.+170    	; 0x38e <calc+0xbc>
 2e4:	40 c0       	rjmp	.+128    	; 0x366 <calc+0x94>
 2e6:	8d 32       	cpi	r24, 0x2D	; 45
 2e8:	79 f0       	breq	.+30     	; 0x308 <calc+0x36>
 2ea:	8f 32       	cpi	r24, 0x2F	; 47
 2ec:	09 f0       	breq	.+2      	; 0x2f0 <calc+0x1e>
 2ee:	4f c0       	rjmp	.+158    	; 0x38e <calc+0xbc>
 2f0:	24 c0       	rjmp	.+72     	; 0x33a <calc+0x68>
switch (choice)
{
case '+' : ans=num1+num2;
 2f2:	80 91 75 00 	lds	r24, 0x0075
 2f6:	90 91 76 00 	lds	r25, 0x0076
 2fa:	20 91 73 00 	lds	r18, 0x0073
 2fe:	30 91 74 00 	lds	r19, 0x0074
 302:	82 0f       	add	r24, r18
 304:	93 1f       	adc	r25, r19
 306:	14 c0       	rjmp	.+40     	; 0x330 <calc+0x5e>
break;

case '-' : 

if(num1>=num2)
 308:	20 91 73 00 	lds	r18, 0x0073
 30c:	30 91 74 00 	lds	r19, 0x0074
 310:	80 91 75 00 	lds	r24, 0x0075
 314:	90 91 76 00 	lds	r25, 0x0076
 318:	28 17       	cp	r18, r24
 31a:	39 07       	cpc	r19, r25
 31c:	3c f0       	brlt	.+14     	; 0x32c <calc+0x5a>
ans=num1-num2;
 31e:	28 1b       	sub	r18, r24
 320:	39 0b       	sbc	r19, r25
 322:	30 93 78 00 	sts	0x0078, r19
 326:	20 93 77 00 	sts	0x0077, r18
 32a:	08 95       	ret
else ans=num2-num1;
 32c:	82 1b       	sub	r24, r18
 32e:	93 0b       	sbc	r25, r19
 330:	90 93 78 00 	sts	0x0078, r25
 334:	80 93 77 00 	sts	0x0077, r24
 338:	08 95       	ret
break;

case '/' : 
if(num1>=num2)
 33a:	20 91 73 00 	lds	r18, 0x0073
 33e:	30 91 74 00 	lds	r19, 0x0074
 342:	60 91 75 00 	lds	r22, 0x0075
 346:	70 91 76 00 	lds	r23, 0x0076
 34a:	26 17       	cp	r18, r22
 34c:	37 07       	cpc	r19, r23
 34e:	14 f0       	brlt	.+4      	; 0x354 <calc+0x82>
ans=num1/num2;
 350:	c9 01       	movw	r24, r18
 352:	02 c0       	rjmp	.+4      	; 0x358 <calc+0x86>
else ans=num2/num1;
 354:	cb 01       	movw	r24, r22
 356:	b9 01       	movw	r22, r18
 358:	0e 94 01 03 	call	0x602	; 0x602 <__divmodhi4>
 35c:	70 93 78 00 	sts	0x0078, r23
 360:	60 93 77 00 	sts	0x0077, r22
 364:	08 95       	ret
break;

case '*' : ans=num1*num2;
 366:	80 91 75 00 	lds	r24, 0x0075
 36a:	90 91 76 00 	lds	r25, 0x0076
 36e:	20 91 73 00 	lds	r18, 0x0073
 372:	30 91 74 00 	lds	r19, 0x0074
 376:	ac 01       	movw	r20, r24
 378:	42 9f       	mul	r20, r18
 37a:	c0 01       	movw	r24, r0
 37c:	43 9f       	mul	r20, r19
 37e:	90 0d       	add	r25, r0
 380:	52 9f       	mul	r21, r18
 382:	90 0d       	add	r25, r0
 384:	11 24       	eor	r1, r1
 386:	90 93 78 00 	sts	0x0078, r25
 38a:	80 93 77 00 	sts	0x0077, r24
break;
}

}
 38e:	08 95       	ret

00000390 <main>:


void main()
{
 390:	1f 93       	push	r17
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
DDRC=255;
 396:	8f ef       	ldi	r24, 0xFF	; 255
 398:	84 bb       	out	0x14, r24	; 20
lcd_init();
 39a:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_init>
DDRA=0xf0;
 39e:	80 ef       	ldi	r24, 0xF0	; 240
 3a0:	8a bb       	out	0x1a, r24	; 26
 3a2:	c0 e9       	ldi	r28, 0x90	; 144
 3a4:	d1 e0       	ldi	r29, 0x01	; 1

start:


num1=0,num2=0,i=0,j=0,
 3a6:	10 92 74 00 	sts	0x0074, r1
 3aa:	10 92 73 00 	sts	0x0073, r1
 3ae:	10 92 76 00 	sts	0x0076, r1
 3b2:	10 92 75 00 	sts	0x0075, r1
 3b6:	10 92 7a 00 	sts	0x007A, r1
 3ba:	10 92 79 00 	sts	0x0079, r1
 3be:	10 92 7c 00 	sts	0x007C, r1
 3c2:	10 92 7b 00 	sts	0x007B, r1
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_command(0x01);
lcd_command(0x80);
 3cc:	80 e8       	ldi	r24, 0x80	; 128
 3ce:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_string("   Calculator");
 3d2:	80 e6       	ldi	r24, 0x60	; 96
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_string>
 3da:	80 e1       	ldi	r24, 0x10	; 16
 3dc:	97 e2       	ldi	r25, 0x27	; 39
 3de:	fe 01       	movw	r30, r28
 3e0:	31 97       	sbiw	r30, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <main+0x50>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3e4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3e6:	d9 f7       	brne	.-10     	; 0x3de <main+0x4e>
char c=0x80;
_delay_ms(1000);
lcd_command(0x01);
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_command(c);
 3ee:	80 e8       	ldi	r24, 0x80	; 128
 3f0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
 3f4:	10 e8       	ldi	r17, 0x80	; 128
//enter 1st number
firnum:

while(1)
{
b=getcha();
 3f6:	0e 94 cc 00 	call	0x198	; 0x198 <getcha>
 3fa:	80 93 71 00 	sts	0x0071, r24
if(b!=0)
 3fe:	88 23       	and	r24, r24
 400:	d1 f3       	breq	.-12     	; 0x3f6 <main+0x66>
{
if((b=='+')||(b=='-')||(b=='/')||(b=='*')||(b=='=')||(b==67))
 402:	8b 32       	cpi	r24, 0x2B	; 43
 404:	09 f4       	brne	.+2      	; 0x408 <main+0x78>
 406:	3c c0       	rjmp	.+120    	; 0x480 <__stack+0x21>
 408:	8d 32       	cpi	r24, 0x2D	; 45
 40a:	d9 f0       	breq	.+54     	; 0x442 <main+0xb2>
 40c:	8f 32       	cpi	r24, 0x2F	; 47
 40e:	c9 f0       	breq	.+50     	; 0x442 <main+0xb2>
 410:	8a 32       	cpi	r24, 0x2A	; 42
 412:	b9 f0       	breq	.+46     	; 0x442 <main+0xb2>
 414:	8d 33       	cpi	r24, 0x3D	; 61
 416:	21 f0       	breq	.+8      	; 0x420 <main+0x90>
 418:	83 34       	cpi	r24, 0x43	; 67
 41a:	09 f0       	breq	.+2      	; 0x41e <main+0x8e>
 41c:	44 c0       	rjmp	.+136    	; 0x4a6 <__stack+0x47>
 41e:	11 c0       	rjmp	.+34     	; 0x442 <main+0xb2>
{
if(b=='=')
{
//equal to
lcd_command(0xce);
 420:	8e ec       	ldi	r24, 0xCE	; 206
 422:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_number(ans);
 426:	80 91 77 00 	lds	r24, 0x0077
 42a:	90 91 78 00 	lds	r25, 0x0078
 42e:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_number>
 432:	88 eb       	ldi	r24, 0xB8	; 184
 434:	98 e8       	ldi	r25, 0x88	; 136
 436:	fe 01       	movw	r30, r28
 438:	31 97       	sbiw	r30, 0x01	; 1
 43a:	f1 f7       	brne	.-4      	; 0x438 <main+0xa8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 43c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 43e:	d9 f7       	brne	.-10     	; 0x436 <main+0xa6>
 440:	b2 cf       	rjmp	.-156    	; 0x3a6 <main+0x16>
_delay_ms(3500);
goto start;
}

if(b==67)
 442:	83 34       	cpi	r24, 0x43	; 67
 444:	e9 f4       	brne	.+58     	; 0x480 <__stack+0x21>
{
num1=num1/10;
 446:	80 91 73 00 	lds	r24, 0x0073
 44a:	90 91 74 00 	lds	r25, 0x0074
 44e:	6a e0       	ldi	r22, 0x0A	; 10
 450:	70 e0       	ldi	r23, 0x00	; 0
 452:	0e 94 01 03 	call	0x602	; 0x602 <__divmodhi4>
 456:	70 93 74 00 	sts	0x0074, r23
 45a:	60 93 73 00 	sts	0x0073, r22
c--;
 45e:	11 50       	subi	r17, 0x01	; 1
lcd_command(c);
 460:	81 2f       	mov	r24, r17
 462:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_data(32);
 466:	80 e2       	ldi	r24, 0x20	; 32
 468:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
i--;
 46c:	80 91 79 00 	lds	r24, 0x0079
 470:	90 91 7a 00 	lds	r25, 0x007A
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	90 93 7a 00 	sts	0x007A, r25
 47a:	80 93 79 00 	sts	0x0079, r24
 47e:	bb cf       	rjmp	.-138    	; 0x3f6 <main+0x66>
goto firnum;
}

else
{
lcd_command(c);
 480:	81 2f       	mov	r24, r17
 482:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
choice=b;
 486:	80 91 71 00 	lds	r24, 0x0071
 48a:	80 93 72 00 	sts	0x0072, r24
lcd_data(32);
 48e:	80 e2       	ldi	r24, 0x20	; 32
 490:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
lcd_data(choice);
 494:	80 91 72 00 	lds	r24, 0x0072
 498:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
lcd_data(32);
 49c:	80 e2       	ldi	r24, 0x20	; 32
 49e:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
c++;c++;c++;
 4a2:	1d 5f       	subi	r17, 0xFD	; 253
 4a4:	32 c0       	rjmp	.+100    	; 0x50a <__stack+0xab>
goto secnum;
}
}
else  if(b>47 && b<59)
 4a6:	80 53       	subi	r24, 0x30	; 48
 4a8:	8b 30       	cpi	r24, 0x0B	; 11
 4aa:	08 f0       	brcs	.+2      	; 0x4ae <__stack+0x4f>
 4ac:	a4 cf       	rjmp	.-184    	; 0x3f6 <main+0x66>
{
lcd_command(c);
 4ae:	81 2f       	mov	r24, r17
 4b0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_data(b);
 4b4:	80 91 71 00 	lds	r24, 0x0071
 4b8:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
num1=(num1*10)+(b-48);
 4bc:	40 91 71 00 	lds	r20, 0x0071
 4c0:	80 91 73 00 	lds	r24, 0x0073
 4c4:	90 91 74 00 	lds	r25, 0x0074
 4c8:	9c 01       	movw	r18, r24
 4ca:	a3 e0       	ldi	r26, 0x03	; 3
 4cc:	22 0f       	add	r18, r18
 4ce:	33 1f       	adc	r19, r19
 4d0:	aa 95       	dec	r26
 4d2:	e1 f7       	brne	.-8      	; 0x4cc <__stack+0x6d>
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	28 0f       	add	r18, r24
 4da:	39 1f       	adc	r19, r25
 4dc:	24 0f       	add	r18, r20
 4de:	31 1d       	adc	r19, r1
 4e0:	20 53       	subi	r18, 0x30	; 48
 4e2:	30 40       	sbci	r19, 0x00	; 0
 4e4:	30 93 74 00 	sts	0x0074, r19
 4e8:	20 93 73 00 	sts	0x0073, r18
A[i]=b;
 4ec:	80 91 79 00 	lds	r24, 0x0079
 4f0:	90 91 7a 00 	lds	r25, 0x007A
 4f4:	fc 01       	movw	r30, r24
 4f6:	e2 59       	subi	r30, 0x92	; 146
 4f8:	ff 4f       	sbci	r31, 0xFF	; 255
 4fa:	40 83       	st	Z, r20
i++;
 4fc:	01 96       	adiw	r24, 0x01	; 1
 4fe:	90 93 7a 00 	sts	0x007A, r25
 502:	80 93 79 00 	sts	0x0079, r24
c++;
 506:	1f 5f       	subi	r17, 0xFF	; 255
 508:	76 cf       	rjmp	.-276    	; 0x3f6 <main+0x66>

secnum:

while(1)
{
b=getcha();
 50a:	0e 94 cc 00 	call	0x198	; 0x198 <getcha>
 50e:	98 2f       	mov	r25, r24
 510:	80 93 71 00 	sts	0x0071, r24
if((b=='=')||(b==67))
 514:	8d 33       	cpi	r24, 0x3D	; 61
 516:	19 f0       	breq	.+6      	; 0x51e <__stack+0xbf>
 518:	83 34       	cpi	r24, 0x43	; 67
 51a:	89 f5       	brne	.+98     	; 0x57e <__stack+0x11f>
 51c:	13 c0       	rjmp	.+38     	; 0x544 <__stack+0xe5>
{
if(b=='=')
{
//equal to
calc();
 51e:	0e 94 69 01 	call	0x2d2	; 0x2d2 <calc>
lcd_command(0xce);
 522:	8e ec       	ldi	r24, 0xCE	; 206
 524:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_number(ans);
 528:	80 91 77 00 	lds	r24, 0x0077
 52c:	90 91 78 00 	lds	r25, 0x0078
 530:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_number>
 534:	88 eb       	ldi	r24, 0xB8	; 184
 536:	98 e8       	ldi	r25, 0x88	; 136
 538:	fe 01       	movw	r30, r28
 53a:	31 97       	sbiw	r30, 0x01	; 1
 53c:	f1 f7       	brne	.-4      	; 0x53a <__stack+0xdb>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 53e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 540:	d9 f7       	brne	.-10     	; 0x538 <__stack+0xd9>
 542:	31 cf       	rjmp	.-414    	; 0x3a6 <main+0x16>
goto start;
}

if(b==67)
{
num1=num1/10;
 544:	80 91 73 00 	lds	r24, 0x0073
 548:	90 91 74 00 	lds	r25, 0x0074
 54c:	6a e0       	ldi	r22, 0x0A	; 10
 54e:	70 e0       	ldi	r23, 0x00	; 0
 550:	0e 94 01 03 	call	0x602	; 0x602 <__divmodhi4>
 554:	70 93 74 00 	sts	0x0074, r23
 558:	60 93 73 00 	sts	0x0073, r22
lcd_command(--c);
 55c:	81 2f       	mov	r24, r17
 55e:	81 50       	subi	r24, 0x01	; 1
 560:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
lcd_data(32);
 564:	80 e2       	ldi	r24, 0x20	; 32
 566:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
i--;
 56a:	80 91 79 00 	lds	r24, 0x0079
 56e:	90 91 7a 00 	lds	r25, 0x007A
 572:	01 97       	sbiw	r24, 0x01	; 1
 574:	90 93 7a 00 	sts	0x007A, r25
 578:	80 93 79 00 	sts	0x0079, r24
 57c:	c6 cf       	rjmp	.-116    	; 0x50a <__stack+0xab>
c++;
}

}
else if(b>47 && b<59)
 57e:	80 53       	subi	r24, 0x30	; 48
 580:	8b 30       	cpi	r24, 0x0B	; 11
 582:	08 f0       	brcs	.+2      	; 0x586 <__stack+0x127>
 584:	c2 cf       	rjmp	.-124    	; 0x50a <__stack+0xab>
{
lcd_data(b);
 586:	89 2f       	mov	r24, r25
 588:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_data>
num2=(num2*10)+(b-48);
 58c:	40 91 71 00 	lds	r20, 0x0071
 590:	80 91 75 00 	lds	r24, 0x0075
 594:	90 91 76 00 	lds	r25, 0x0076
 598:	9c 01       	movw	r18, r24
 59a:	e3 e0       	ldi	r30, 0x03	; 3
 59c:	22 0f       	add	r18, r18
 59e:	33 1f       	adc	r19, r19
 5a0:	ea 95       	dec	r30
 5a2:	e1 f7       	brne	.-8      	; 0x59c <__stack+0x13d>
 5a4:	88 0f       	add	r24, r24
 5a6:	99 1f       	adc	r25, r25
 5a8:	28 0f       	add	r18, r24
 5aa:	39 1f       	adc	r19, r25
 5ac:	24 0f       	add	r18, r20
 5ae:	31 1d       	adc	r19, r1
 5b0:	20 53       	subi	r18, 0x30	; 48
 5b2:	30 40       	sbci	r19, 0x00	; 0
 5b4:	30 93 76 00 	sts	0x0076, r19
 5b8:	20 93 75 00 	sts	0x0075, r18
B[j]=b;
 5bc:	80 91 7b 00 	lds	r24, 0x007B
 5c0:	90 91 7c 00 	lds	r25, 0x007C
 5c4:	fc 01       	movw	r30, r24
 5c6:	e1 59       	subi	r30, 0x91	; 145
 5c8:	ff 4f       	sbci	r31, 0xFF	; 255
 5ca:	40 83       	st	Z, r20
j++;
 5cc:	01 96       	adiw	r24, 0x01	; 1
 5ce:	90 93 7c 00 	sts	0x007C, r25
 5d2:	80 93 7b 00 	sts	0x007B, r24
c++;
 5d6:	1f 5f       	subi	r17, 0xFF	; 255
 5d8:	98 cf       	rjmp	.-208    	; 0x50a <__stack+0xab>

000005da <__udivmodhi4>:
 5da:	aa 1b       	sub	r26, r26
 5dc:	bb 1b       	sub	r27, r27
 5de:	51 e1       	ldi	r21, 0x11	; 17
 5e0:	07 c0       	rjmp	.+14     	; 0x5f0 <__udivmodhi4_ep>

000005e2 <__udivmodhi4_loop>:
 5e2:	aa 1f       	adc	r26, r26
 5e4:	bb 1f       	adc	r27, r27
 5e6:	a6 17       	cp	r26, r22
 5e8:	b7 07       	cpc	r27, r23
 5ea:	10 f0       	brcs	.+4      	; 0x5f0 <__udivmodhi4_ep>
 5ec:	a6 1b       	sub	r26, r22
 5ee:	b7 0b       	sbc	r27, r23

000005f0 <__udivmodhi4_ep>:
 5f0:	88 1f       	adc	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	5a 95       	dec	r21
 5f6:	a9 f7       	brne	.-22     	; 0x5e2 <__udivmodhi4_loop>
 5f8:	80 95       	com	r24
 5fa:	90 95       	com	r25
 5fc:	bc 01       	movw	r22, r24
 5fe:	cd 01       	movw	r24, r26
 600:	08 95       	ret

00000602 <__divmodhi4>:
 602:	97 fb       	bst	r25, 7
 604:	09 2e       	mov	r0, r25
 606:	07 26       	eor	r0, r23
 608:	0a d0       	rcall	.+20     	; 0x61e <__divmodhi4_neg1>
 60a:	77 fd       	sbrc	r23, 7
 60c:	04 d0       	rcall	.+8      	; 0x616 <__divmodhi4_neg2>
 60e:	e5 df       	rcall	.-54     	; 0x5da <__udivmodhi4>
 610:	06 d0       	rcall	.+12     	; 0x61e <__divmodhi4_neg1>
 612:	00 20       	and	r0, r0
 614:	1a f4       	brpl	.+6      	; 0x61c <__divmodhi4_exit>

00000616 <__divmodhi4_neg2>:
 616:	70 95       	com	r23
 618:	61 95       	neg	r22
 61a:	7f 4f       	sbci	r23, 0xFF	; 255

0000061c <__divmodhi4_exit>:
 61c:	08 95       	ret

0000061e <__divmodhi4_neg1>:
 61e:	f6 f7       	brtc	.-4      	; 0x61c <__divmodhi4_exit>
 620:	90 95       	com	r25
 622:	81 95       	neg	r24
 624:	9f 4f       	sbci	r25, 0xFF	; 255
 626:	08 95       	ret

00000628 <_exit>:
 628:	f8 94       	cli

0000062a <__stop_program>:
 62a:	ff cf       	rjmp	.-2      	; 0x62a <__stop_program>
