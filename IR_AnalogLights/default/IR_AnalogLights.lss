
IR_AnalogLights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  000002a8  0000031c  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000085  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000352  00000000  00000000  000003c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001bb  00000000  00000000  00000713  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000040c  00000000  00000000  000008ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00000cdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000108  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000d4  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ea       	ldi	r30, 0xA8	; 168
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 30       	cpi	r26, 0x02	; 2
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <main>
  c6:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000000ce <lcd_command>:
lcd_command(0X0c);		// screen on cursor off
lcd_command(0X06);		//auto increment
}

void lcd_command(char cmd)
{
  ce:	28 2f       	mov	r18, r24
  d0:	20 7f       	andi	r18, 0xF0	; 240
  d2:	25 bb       	out	0x15, r18	; 21

LCD=(cmd&0xf0);
LCD&=~(1<<rs);
  d4:	a8 98       	cbi	0x15, 0	; 21
LCD&=~(1<<rw);
  d6:	a8 98       	cbi	0x15, 0	; 21
LCD|=(1<<en);
  d8:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  da:	20 e4       	ldi	r18, 0x40	; 64
  dc:	3f e1       	ldi	r19, 0x1F	; 31
  de:	f9 01       	movw	r30, r18
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_command+0x12>
_delay_ms(2);		
LCD&=~(1<<en);
  e4:	aa 98       	cbi	0x15, 2	; 21

LCD=(cmd<<4)&0xf0;
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	44 e0       	ldi	r20, 0x04	; 4
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	4a 95       	dec	r20
  f0:	e1 f7       	brne	.-8      	; 0xea <lcd_command+0x1c>
  f2:	85 bb       	out	0x15, r24	; 21
LCD|=(1<<en);
  f4:	aa 9a       	sbi	0x15, 2	; 21
  f6:	c9 01       	movw	r24, r18
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_command+0x2a>
_delay_ms(2);
LCD&=~(1<<en);
  fc:	aa 98       	cbi	0x15, 2	; 21

}
  fe:	08 95       	ret

00000100 <lcd_init>:
#define LCD PORTC
#define en 2
char *str;

void lcd_init()
{
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 67 00 	call	0xce	; 0xce <lcd_command>
lcd_command(0X02);		// home screen
lcd_command(0X28);		// 4 bit mode
 108:	88 e2       	ldi	r24, 0x28	; 40
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 67 00 	call	0xce	; 0xce <lcd_command>
lcd_command(0X0c);		// screen on cursor off
 110:	8c e0       	ldi	r24, 0x0C	; 12
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 67 00 	call	0xce	; 0xce <lcd_command>
lcd_command(0X06);		//auto increment
 118:	86 e0       	ldi	r24, 0x06	; 6
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 67 00 	call	0xce	; 0xce <lcd_command>
}
 120:	08 95       	ret

00000122 <lcd_data>:
LCD&=~(1<<en);

}

void lcd_data(char data)
{
 122:	28 2f       	mov	r18, r24
 124:	20 7f       	andi	r18, 0xF0	; 240
 126:	25 bb       	out	0x15, r18	; 21
LCD=data&0xf0;
LCD|=(1<<rs);
 128:	a8 9a       	sbi	0x15, 0	; 21
LCD|=(1<<en);
 12a:	aa 9a       	sbi	0x15, 2	; 21
 12c:	20 e4       	ldi	r18, 0x40	; 64
 12e:	3f e1       	ldi	r19, 0x1F	; 31
 130:	f9 01       	movw	r30, r18
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <lcd_data+0x10>
_delay_ms(2);
LCD&=~(1<<en);
 136:	aa 98       	cbi	0x15, 2	; 21

LCD=(data<<4)&0xf0;
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	54 e0       	ldi	r21, 0x04	; 4
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	5a 95       	dec	r21
 142:	e1 f7       	brne	.-8      	; 0x13c <lcd_data+0x1a>
 144:	85 bb       	out	0x15, r24	; 21
LCD|=(1<<rs);
 146:	a8 9a       	sbi	0x15, 0	; 21
LCD|=(1<<en);
 148:	aa 9a       	sbi	0x15, 2	; 21
 14a:	c9 01       	movw	r24, r18
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_data+0x2a>
_delay_ms(2);
LCD&=~(1<<en);
 150:	aa 98       	cbi	0x15, 2	; 21
}
 152:	08 95       	ret

00000154 <lcd_string>:



void lcd_string(unsigned char *str)
{
 154:	ef 92       	push	r14
 156:	ff 92       	push	r15
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	ec 01       	movw	r28, r24
 160:	10 e0       	ldi	r17, 0x00	; 0
 162:	60 ea       	ldi	r22, 0xA0	; 160
 164:	e6 2e       	mov	r14, r22
 166:	6f e0       	ldi	r22, 0x0F	; 15
 168:	f6 2e       	mov	r15, r22
 16a:	06 c0       	rjmp	.+12     	; 0x178 <lcd_string+0x24>
char d=0;

while(str[d]!='\0')
{
lcd_data(str[d]);
 16c:	0e 94 91 00 	call	0x122	; 0x122 <lcd_data>
d++;
 170:	1f 5f       	subi	r17, 0xFF	; 255
 172:	c7 01       	movw	r24, r14
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_string+0x20>

void lcd_string(unsigned char *str)
{
char d=0;

while(str[d]!='\0')
 178:	fe 01       	movw	r30, r28
 17a:	e1 0f       	add	r30, r17
 17c:	f1 1d       	adc	r31, r1
 17e:	80 81       	ld	r24, Z
 180:	88 23       	and	r24, r24
 182:	a1 f7       	brne	.-24     	; 0x16c <lcd_string+0x18>
{
lcd_data(str[d]);
d++;
_delay_ms(1);
}
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	1f 91       	pop	r17
 18a:	ff 90       	pop	r15
 18c:	ef 90       	pop	r14
 18e:	08 95       	ret

00000190 <lcd_number>:




void lcd_number(unsigned int no)
{
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	ec 01       	movw	r28, r24

lcd_command(0x04);
 196:	84 e0       	ldi	r24, 0x04	; 4
 198:	0e 94 67 00 	call	0xce	; 0xce <lcd_command>
int value=0;

if (no==0)
 19c:	20 97       	sbiw	r28, 0x00	; 0
 19e:	91 f4       	brne	.+36     	; 0x1c4 <lcd_number+0x34>
	lcd_data('0');
 1a0:	80 e3       	ldi	r24, 0x30	; 48
 1a2:	0e 94 91 00 	call	0x122	; 0x122 <lcd_data>
 1a6:	0e c0       	rjmp	.+28     	; 0x1c4 <lcd_number+0x34>
while(no!=0)
{
	value = no%10;
	lcd_data(48+value);
 1a8:	ce 01       	movw	r24, r28
 1aa:	6a e0       	ldi	r22, 0x0A	; 10
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	0e 94 3e 01 	call	0x27c	; 0x27c <__udivmodhi4>
 1b2:	80 5d       	subi	r24, 0xD0	; 208
 1b4:	0e 94 91 00 	call	0x122	; 0x122 <lcd_data>
	no=no/10;
 1b8:	ce 01       	movw	r24, r28
 1ba:	6a e0       	ldi	r22, 0x0A	; 10
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	0e 94 3e 01 	call	0x27c	; 0x27c <__udivmodhi4>
 1c2:	eb 01       	movw	r28, r22
lcd_command(0x04);
int value=0;

if (no==0)
	lcd_data('0');
while(no!=0)
 1c4:	20 97       	sbiw	r28, 0x00	; 0
 1c6:	81 f7       	brne	.-32     	; 0x1a8 <lcd_number+0x18>
{
	value = no%10;
	lcd_data(48+value);
	no=no/10;
}
lcd_command(0x06);
 1c8:	86 e0       	ldi	r24, 0x06	; 6
 1ca:	0e 94 67 00 	call	0xce	; 0xce <lcd_command>
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <main>:

void adc_init();
unsigned int adc_read(char ch);

void main()
{
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	87 bb       	out	0x17, r24	; 23
}
}

void adc_init()
{
ADMUX=(1<<REFS0);
 1d8:	80 e4       	ldi	r24, 0x40	; 64
 1da:	87 b9       	out	0x07, r24	; 7
ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 1dc:	87 e8       	ldi	r24, 0x87	; 135
 1de:	86 b9       	out	0x06, r24	; 6
}

unsigned int adc_read(char ch)
{
ADMUX=0x40|ch;
 1e0:	a0 e4       	ldi	r26, 0x40	; 64
	break;
	case 2 : 
	PORTB=0x07;
	break;
	case 3 :
	PORTB=0x0f;
 1e2:	ff e0       	ldi	r31, 0x0F	; 15
	break;
	case 4 : 
	PORTB=0x1f;
	break;
	case 5 : 
	PORTB=0x3f;
 1e4:	ef e3       	ldi	r30, 0x3F	; 63
	break;
	case 3 :
	PORTB=0x0f;
	break;
	case 4 : 
	PORTB=0x1f;
 1e6:	7f e1       	ldi	r23, 0x1F	; 31
	break;
	case 5 : 
	PORTB=0x3f;
	break;
	case 6 : 
	PORTB=0x7f;
 1e8:	6f e7       	ldi	r22, 0x7F	; 127
	break;
	case 7 : 
	PORTB=0xff;
 1ea:	5f ef       	ldi	r21, 0xFF	; 255
{
	case 0 : 
	PORTB=0x01;
	break;
	case 1 : 
	PORTB=0x03;
 1ec:	43 e0       	ldi	r20, 0x03	; 3
	break;
	case 2 : 
	PORTB=0x07;
 1ee:	37 e0       	ldi	r19, 0x07	; 7
i=adc_read(0);
k=i/128;
switch(k)
{
	case 0 : 
	PORTB=0x01;
 1f0:	21 e0       	ldi	r18, 0x01	; 1
ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
}

unsigned int adc_read(char ch)
{
ADMUX=0x40|ch;
 1f2:	a7 b9       	out	0x07, r26	; 7
ADCSRA|=(1<<ADSC);
 1f4:	36 9a       	sbi	0x06, 6	; 6
while((ADCSRA&0b00010000)==0);
 1f6:	34 9b       	sbis	0x06, 4	; 6
 1f8:	fe cf       	rjmp	.-4      	; 0x1f6 <main+0x22>
ADCSRA|=(1<<ADIF);
 1fa:	34 9a       	sbi	0x06, 4	; 6
return ADC;
 1fc:	84 b1       	in	r24, 0x04	; 4
 1fe:	95 b1       	in	r25, 0x05	; 5
unsigned int i=0,k=0;
while(1)
{
i=adc_read(0);
k=i/128;
switch(k)
 200:	88 0f       	add	r24, r24
 202:	89 2f       	mov	r24, r25
 204:	88 1f       	adc	r24, r24
 206:	99 0b       	sbc	r25, r25
 208:	91 95       	neg	r25
 20a:	83 30       	cpi	r24, 0x03	; 3
 20c:	91 05       	cpc	r25, r1
 20e:	d9 f0       	breq	.+54     	; 0x246 <main+0x72>
 210:	84 30       	cpi	r24, 0x04	; 4
 212:	91 05       	cpc	r25, r1
 214:	30 f4       	brcc	.+12     	; 0x222 <main+0x4e>
 216:	81 30       	cpi	r24, 0x01	; 1
 218:	91 05       	cpc	r25, r1
 21a:	89 f0       	breq	.+34     	; 0x23e <main+0x6a>
 21c:	02 97       	sbiw	r24, 0x02	; 2
 21e:	88 f4       	brcc	.+34     	; 0x242 <main+0x6e>
 220:	0c c0       	rjmp	.+24     	; 0x23a <main+0x66>
 222:	85 30       	cpi	r24, 0x05	; 5
 224:	91 05       	cpc	r25, r1
 226:	99 f0       	breq	.+38     	; 0x24e <main+0x7a>
 228:	85 30       	cpi	r24, 0x05	; 5
 22a:	91 05       	cpc	r25, r1
 22c:	70 f0       	brcs	.+28     	; 0x24a <main+0x76>
 22e:	86 30       	cpi	r24, 0x06	; 6
 230:	91 05       	cpc	r25, r1
 232:	79 f0       	breq	.+30     	; 0x252 <main+0x7e>
 234:	07 97       	sbiw	r24, 0x07	; 7
 236:	89 f4       	brne	.+34     	; 0x25a <main+0x86>
 238:	0e c0       	rjmp	.+28     	; 0x256 <main+0x82>
{
	case 0 : 
	PORTB=0x01;
 23a:	28 bb       	out	0x18, r18	; 24
 23c:	da cf       	rjmp	.-76     	; 0x1f2 <main+0x1e>
	break;
	case 1 : 
	PORTB=0x03;
 23e:	48 bb       	out	0x18, r20	; 24
 240:	d8 cf       	rjmp	.-80     	; 0x1f2 <main+0x1e>
	break;
	case 2 : 
	PORTB=0x07;
 242:	38 bb       	out	0x18, r19	; 24
 244:	d6 cf       	rjmp	.-84     	; 0x1f2 <main+0x1e>
	break;
	case 3 :
	PORTB=0x0f;
 246:	f8 bb       	out	0x18, r31	; 24
 248:	d4 cf       	rjmp	.-88     	; 0x1f2 <main+0x1e>
	break;
	case 4 : 
	PORTB=0x1f;
 24a:	78 bb       	out	0x18, r23	; 24
 24c:	d2 cf       	rjmp	.-92     	; 0x1f2 <main+0x1e>
	break;
	case 5 : 
	PORTB=0x3f;
 24e:	e8 bb       	out	0x18, r30	; 24
 250:	d0 cf       	rjmp	.-96     	; 0x1f2 <main+0x1e>
	break;
	case 6 : 
	PORTB=0x7f;
 252:	68 bb       	out	0x18, r22	; 24
 254:	ce cf       	rjmp	.-100    	; 0x1f2 <main+0x1e>
	break;
	case 7 : 
	PORTB=0xff;
 256:	58 bb       	out	0x18, r21	; 24
 258:	cc cf       	rjmp	.-104    	; 0x1f2 <main+0x1e>
	break;
	default :
	PORTB=0;
 25a:	18 ba       	out	0x18, r1	; 24
 25c:	ca cf       	rjmp	.-108    	; 0x1f2 <main+0x1e>

0000025e <adc_init>:
}
}
}

void adc_init()
{
 25e:	80 e4       	ldi	r24, 0x40	; 64
 260:	87 b9       	out	0x07, r24	; 7
ADMUX=(1<<REFS0);
ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 262:	87 e8       	ldi	r24, 0x87	; 135
 264:	86 b9       	out	0x06, r24	; 6
}
 266:	08 95       	ret

00000268 <adc_read>:

unsigned int adc_read(char ch)
{
 268:	80 64       	ori	r24, 0x40	; 64
 26a:	87 b9       	out	0x07, r24	; 7
ADMUX=0x40|ch;
ADCSRA|=(1<<ADSC);
 26c:	36 9a       	sbi	0x06, 6	; 6
while((ADCSRA&0b00010000)==0);
 26e:	34 9b       	sbis	0x06, 4	; 6
 270:	fe cf       	rjmp	.-4      	; 0x26e <adc_read+0x6>
ADCSRA|=(1<<ADIF);
 272:	34 9a       	sbi	0x06, 4	; 6
return ADC;
 274:	24 b1       	in	r18, 0x04	; 4
 276:	35 b1       	in	r19, 0x05	; 5
}
 278:	c9 01       	movw	r24, r18
 27a:	08 95       	ret

0000027c <__udivmodhi4>:
 27c:	aa 1b       	sub	r26, r26
 27e:	bb 1b       	sub	r27, r27
 280:	51 e1       	ldi	r21, 0x11	; 17
 282:	07 c0       	rjmp	.+14     	; 0x292 <__udivmodhi4_ep>

00000284 <__udivmodhi4_loop>:
 284:	aa 1f       	adc	r26, r26
 286:	bb 1f       	adc	r27, r27
 288:	a6 17       	cp	r26, r22
 28a:	b7 07       	cpc	r27, r23
 28c:	10 f0       	brcs	.+4      	; 0x292 <__udivmodhi4_ep>
 28e:	a6 1b       	sub	r26, r22
 290:	b7 0b       	sbc	r27, r23

00000292 <__udivmodhi4_ep>:
 292:	88 1f       	adc	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	5a 95       	dec	r21
 298:	a9 f7       	brne	.-22     	; 0x284 <__udivmodhi4_loop>
 29a:	80 95       	com	r24
 29c:	90 95       	com	r25
 29e:	bc 01       	movw	r22, r24
 2a0:	cd 01       	movw	r24, r26
 2a2:	08 95       	ret

000002a4 <_exit>:
 2a4:	f8 94       	cli

000002a6 <__stop_program>:
 2a6:	ff cf       	rjmp	.-2      	; 0x2a6 <__stop_program>
