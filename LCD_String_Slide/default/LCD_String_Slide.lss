
LCD_String_Slide.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000002e2  00000356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800128  0000030a  0000037e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000037e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000078  00000000  00000000  0000039e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000401  00000000  00000000  00000416  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000199  00000000  00000000  00000817  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036f  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00000d20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000ff  00000000  00000000  00000d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e5  00000000  00000000  00000e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ee       	ldi	r30, 0xE2	; 226
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 32       	cpi	r26, 0x28	; 40
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a8 e2       	ldi	r26, 0x28	; 40
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 32       	cpi	r26, 0x2A	; 42
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <main>
  c6:	0c 94 6f 01 	jmp	0x2de	; 0x2de <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <lcd_command>:
lcd_command(0X0c);		// screen on cursor off
lcd_command(0X06);		//auto increment
}

void lcd_command(char cmd)
{
  ce:	28 2f       	mov	r18, r24
  d0:	20 7f       	andi	r18, 0xF0	; 240
  d2:	25 bb       	out	0x15, r18	; 21

LCD=(cmd&0xf0);
LCD&=~(1<<rs);
  d4:	a8 98       	cbi	0x15, 0	; 21
LCD&=~(1<<rw);
  d6:	a8 98       	cbi	0x15, 0	; 21
LCD|=(1<<en);
  d8:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  da:	20 e4       	ldi	r18, 0x40	; 64
  dc:	3f e1       	ldi	r19, 0x1F	; 31
  de:	f9 01       	movw	r30, r18
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_command+0x12>
_delay_ms(2);		
LCD&=~(1<<en);
  e4:	aa 98       	cbi	0x15, 2	; 21

LCD=(cmd<<4)&0xf0;
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	44 e0       	ldi	r20, 0x04	; 4
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	4a 95       	dec	r20
  f0:	e1 f7       	brne	.-8      	; 0xea <lcd_command+0x1c>
  f2:	85 bb       	out	0x15, r24	; 21
LCD|=(1<<en);
  f4:	aa 9a       	sbi	0x15, 2	; 21
  f6:	c9 01       	movw	r24, r18
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_command+0x2a>
_delay_ms(2);
LCD&=~(1<<en);
  fc:	aa 98       	cbi	0x15, 2	; 21

}
  fe:	08 95       	ret

00000100 <lcd_init>:
#define LCD PORTC
#define en 2
char *str;

void lcd_init()
{
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 67 00 	call	0xce	; 0xce <lcd_command>
lcd_command(0X02);		// home screen
lcd_command(0X28);		// 4 bit mode
 108:	88 e2       	ldi	r24, 0x28	; 40
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 67 00 	call	0xce	; 0xce <lcd_command>
lcd_command(0X0c);		// screen on cursor off
 110:	8c e0       	ldi	r24, 0x0C	; 12
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 67 00 	call	0xce	; 0xce <lcd_command>
lcd_command(0X06);		//auto increment
 118:	86 e0       	ldi	r24, 0x06	; 6
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 67 00 	call	0xce	; 0xce <lcd_command>
}
 120:	08 95       	ret

00000122 <lcd_data>:
LCD&=~(1<<en);

}

void lcd_data(char data)
{
 122:	28 2f       	mov	r18, r24
 124:	20 7f       	andi	r18, 0xF0	; 240
 126:	25 bb       	out	0x15, r18	; 21
LCD=data&0xf0;
LCD|=(1<<rs);
 128:	a8 9a       	sbi	0x15, 0	; 21
LCD|=(1<<en);
 12a:	aa 9a       	sbi	0x15, 2	; 21
 12c:	20 e4       	ldi	r18, 0x40	; 64
 12e:	3f e1       	ldi	r19, 0x1F	; 31
 130:	f9 01       	movw	r30, r18
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <lcd_data+0x10>
_delay_ms(2);
LCD&=~(1<<en);
 136:	aa 98       	cbi	0x15, 2	; 21

LCD=(data<<4)&0xf0;
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	54 e0       	ldi	r21, 0x04	; 4
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	5a 95       	dec	r21
 142:	e1 f7       	brne	.-8      	; 0x13c <lcd_data+0x1a>
 144:	85 bb       	out	0x15, r24	; 21
LCD|=(1<<rs);
 146:	a8 9a       	sbi	0x15, 0	; 21
LCD|=(1<<en);
 148:	aa 9a       	sbi	0x15, 2	; 21
 14a:	c9 01       	movw	r24, r18
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_data+0x2a>
_delay_ms(2);
LCD&=~(1<<en);
 150:	aa 98       	cbi	0x15, 2	; 21
}
 152:	08 95       	ret

00000154 <lcd_string_forward>:

void lcd_string_forward(unsigned char *str)
{
 154:	ef 92       	push	r14
 156:	ff 92       	push	r15
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	ec 01       	movw	r28, r24
 160:	10 e0       	ldi	r17, 0x00	; 0
 162:	60 ea       	ldi	r22, 0xA0	; 160
 164:	e6 2e       	mov	r14, r22
 166:	6f e0       	ldi	r22, 0x0F	; 15
 168:	f6 2e       	mov	r15, r22
 16a:	06 c0       	rjmp	.+12     	; 0x178 <lcd_string_forward+0x24>
char d=0;

while(str[d]!='\0')
{
lcd_data(str[d]);
 16c:	0e 94 91 00 	call	0x122	; 0x122 <lcd_data>
d++;
 170:	1f 5f       	subi	r17, 0xFF	; 255
 172:	c7 01       	movw	r24, r14
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_string_forward+0x20>

void lcd_string_forward(unsigned char *str)
{
char d=0;

while(str[d]!='\0')
 178:	fe 01       	movw	r30, r28
 17a:	e1 0f       	add	r30, r17
 17c:	f1 1d       	adc	r31, r1
 17e:	80 81       	ld	r24, Z
 180:	88 23       	and	r24, r24
 182:	a1 f7       	brne	.-24     	; 0x16c <lcd_string_forward+0x18>
{
lcd_data(str[d]);
d++;
_delay_ms(1);
}
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	1f 91       	pop	r17
 18a:	ff 90       	pop	r15
 18c:	ef 90       	pop	r14
 18e:	08 95       	ret

00000190 <lcd_string_back>:

void lcd_string_back(unsigned char *str)
{
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	ec 01       	movw	r28, r24
char d=strlen(str)-1;
 19c:	dc 01       	movw	r26, r24
 19e:	0d 90       	ld	r0, X+
 1a0:	00 20       	and	r0, r0
 1a2:	e9 f7       	brne	.-6      	; 0x19e <lcd_string_back+0xe>
 1a4:	1a 2f       	mov	r17, r26
 1a6:	18 1b       	sub	r17, r24
 1a8:	12 50       	subi	r17, 0x02	; 2
 1aa:	70 ea       	ldi	r23, 0xA0	; 160
 1ac:	e7 2e       	mov	r14, r23
 1ae:	7f e0       	ldi	r23, 0x0F	; 15
 1b0:	f7 2e       	mov	r15, r23
 1b2:	0a c0       	rjmp	.+20     	; 0x1c8 <lcd_string_back+0x38>

while(d>0)
{
lcd_data(str[d]);
 1b4:	fe 01       	movw	r30, r28
 1b6:	e1 0f       	add	r30, r17
 1b8:	f1 1d       	adc	r31, r1
 1ba:	80 81       	ld	r24, Z
 1bc:	0e 94 91 00 	call	0x122	; 0x122 <lcd_data>
d--;
 1c0:	11 50       	subi	r17, 0x01	; 1
 1c2:	c7 01       	movw	r24, r14
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_string_back+0x34>

void lcd_string_back(unsigned char *str)
{
char d=strlen(str)-1;

while(d>0)
 1c8:	11 23       	and	r17, r17
 1ca:	a1 f7       	brne	.-24     	; 0x1b4 <lcd_string_back+0x24>
{
lcd_data(str[d]);
d--;
_delay_ms(1);
}
}
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	1f 91       	pop	r17
 1d2:	ff 90       	pop	r15
 1d4:	ef 90       	pop	r14
 1d6:	08 95       	ret

000001d8 <main>:




void main()
{
 1d8:	4f 92       	push	r4
 1da:	5f 92       	push	r5
 1dc:	6f 92       	push	r6
 1de:	7f 92       	push	r7
 1e0:	8f 92       	push	r8
 1e2:	9f 92       	push	r9
 1e4:	af 92       	push	r10
 1e6:	bf 92       	push	r11
 1e8:	cf 92       	push	r12
 1ea:	df 92       	push	r13
 1ec:	ef 92       	push	r14
 1ee:	ff 92       	push	r15
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	df 93       	push	r29
 1f6:	cf 93       	push	r28
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
 1fc:	a8 97       	sbiw	r28, 0x28	; 40
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	de bf       	out	0x3e, r29	; 62
 204:	0f be       	out	0x3f, r0	; 63
 206:	cd bf       	out	0x3d, r28	; 61
unsigned char c;
DDRC=0xff;
 208:	8f ef       	ldi	r24, 0xFF	; 255
 20a:	84 bb       	out	0x14, r24	; 20
lcd_init();
 20c:	0e 94 80 00 	call	0x100	; 0x100 <lcd_init>
char A[40]="Type your text here I wou ";
 210:	de 01       	movw	r26, r28
 212:	11 96       	adiw	r26, 0x01	; 1
 214:	e0 e0       	ldi	r30, 0x00	; 0
 216:	f1 e0       	ldi	r31, 0x01	; 1
 218:	8b e1       	ldi	r24, 0x1B	; 27
 21a:	01 90       	ld	r0, Z+
 21c:	0d 92       	st	X+, r0
 21e:	81 50       	subi	r24, 0x01	; 1
 220:	e1 f7       	brne	.-8      	; 0x21a <main+0x42>
 222:	fe 01       	movw	r30, r28
 224:	7c 96       	adiw	r30, 0x1c	; 28
 226:	8d e0       	ldi	r24, 0x0D	; 13
 228:	df 01       	movw	r26, r30
 22a:	1d 92       	st	X+, r1
 22c:	8a 95       	dec	r24
 22e:	e9 f7       	brne	.-6      	; 0x22a <main+0x52>
int l = 0x80 + (strlen(A)-2);
 230:	5e 01       	movw	r10, r28
 232:	08 94       	sec
 234:	a1 1c       	adc	r10, r1
 236:	b1 1c       	adc	r11, r1
 238:	f5 01       	movw	r30, r10
 23a:	01 90       	ld	r0, Z+
 23c:	00 20       	and	r0, r0
 23e:	e9 f7       	brne	.-6      	; 0x23a <main+0x62>
 240:	7f 01       	movw	r14, r30
 242:	ea 18       	sub	r14, r10
 244:	fb 08       	sbc	r15, r11
 246:	8d e7       	ldi	r24, 0x7D	; 125
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	e8 0e       	add	r14, r24
 24c:	f9 1e       	adc	r15, r25
 24e:	ce 2c       	mov	r12, r14
 250:	1f e8       	ldi	r17, 0x8F	; 143
 252:	a0 e9       	ldi	r26, 0x90	; 144
 254:	8a 2e       	mov	r8, r26
 256:	a1 e0       	ldi	r26, 0x01	; 1
 258:	9a 2e       	mov	r9, r26
while(1)
{

for(c=0x8f;c>=0x80;c--)
{
lcd_command(c);
 25a:	f0 e2       	ldi	r31, 0x20	; 32
 25c:	4f 2e       	mov	r4, r31
 25e:	fe e4       	ldi	r31, 0x4E	; 78
 260:	5f 2e       	mov	r5, r31
 262:	e0 e6       	ldi	r30, 0x60	; 96
 264:	6e 2e       	mov	r6, r30
 266:	ea ee       	ldi	r30, 0xEA	; 234
 268:	7e 2e       	mov	r7, r30
 26a:	14 c0       	rjmp	.+40     	; 0x294 <main+0xbc>
 26c:	81 2f       	mov	r24, r17
 26e:	0e 94 67 00 	call	0xce	; 0xce <lcd_command>
lcd_string_forward(A);
 272:	c5 01       	movw	r24, r10
 274:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_string_forward>
 278:	8c ea       	ldi	r24, 0xAC	; 172
 27a:	9d e0       	ldi	r25, 0x0D	; 13
 27c:	f4 01       	movw	r30, r8
 27e:	31 97       	sbiw	r30, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <main+0xa6>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 282:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 284:	d9 f7       	brne	.-10     	; 0x27c <main+0xa4>
_delay_ms(350);
lcd_command(0x01);
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 67 00 	call	0xce	; 0xce <lcd_command>
 28c:	c3 01       	movw	r24, r6
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <main+0xb6>
char A[40]="Type your text here I wou ";
int l = 0x80 + (strlen(A)-2);
while(1)
{

for(c=0x8f;c>=0x80;c--)
 292:	11 50       	subi	r17, 0x01	; 1
 294:	17 fd       	sbrc	r17, 7
 296:	ea cf       	rjmp	.-44     	; 0x26c <main+0x94>
lcd_string_forward(A);
_delay_ms(350);
lcd_command(0x01);
_delay_ms(15);
}
for(c=l;c>=0x80;c--)
 298:	dc 2c       	mov	r13, r12
 29a:	00 e0       	ldi	r16, 0x00	; 0
 29c:	10 e0       	ldi	r17, 0x00	; 0
 29e:	19 c0       	rjmp	.+50     	; 0x2d2 <main+0xfa>
{
lcd_command(0x04);
 2a0:	84 e0       	ldi	r24, 0x04	; 4
 2a2:	0e 94 67 00 	call	0xce	; 0xce <lcd_command>
lcd_command(c);
 2a6:	8d 2d       	mov	r24, r13
 2a8:	0e 94 67 00 	call	0xce	; 0xce <lcd_command>
lcd_string_back(A);
 2ac:	c5 01       	movw	r24, r10
 2ae:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_string_back>
 2b2:	8c ea       	ldi	r24, 0xAC	; 172
 2b4:	9d e0       	ldi	r25, 0x0D	; 13
 2b6:	f4 01       	movw	r30, r8
 2b8:	31 97       	sbiw	r30, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <main+0xe0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2be:	d9 f7       	brne	.-10     	; 0x2b6 <main+0xde>
_delay_ms(350);
lcd_command(0x01);
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 67 00 	call	0xce	; 0xce <lcd_command>
 2c6:	c2 01       	movw	r24, r4
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <main+0xf0>
lcd_string_forward(A);
_delay_ms(350);
lcd_command(0x01);
_delay_ms(15);
}
for(c=l;c>=0x80;c--)
 2cc:	da 94       	dec	r13
 2ce:	0f 5f       	subi	r16, 0xFF	; 255
 2d0:	1f 4f       	sbci	r17, 0xFF	; 255
 2d2:	8e 2d       	mov	r24, r14
 2d4:	80 1b       	sub	r24, r16
 2d6:	87 fd       	sbrc	r24, 7
 2d8:	e3 cf       	rjmp	.-58     	; 0x2a0 <main+0xc8>
 2da:	1f e8       	ldi	r17, 0x8F	; 143
 2dc:	c7 cf       	rjmp	.-114    	; 0x26c <main+0x94>

000002de <_exit>:
 2de:	f8 94       	cli

000002e0 <__stop_program>:
 2e0:	ff cf       	rjmp	.-2      	; 0x2e0 <__stop_program>
