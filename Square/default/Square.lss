
Square.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000205  00000000  00000000  000001db  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000fe  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001f7  00000000  00000000  000004de  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000006d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000aa  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000b8  00000000  00000000  000007a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  0000085a  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e4       	ldi	r30, 0x4C	; 76
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 30       	cpi	r26, 0x00	; 0
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 67 00 	call	0xce	; 0xce <main>
  c6:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000000ce <main>:
#include<avr/io.h>
#define F_CPU 16000000UL
#include<util/delay.h>
void main()
{
  ce:	ff 92       	push	r15
  d0:	0f 93       	push	r16
  d2:	1f 93       	push	r17
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
	DDRB=0b11111111;
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	87 bb       	out	0x17, r24	; 23
	DDRC=0b11111111;
  dc:	84 bb       	out	0x14, r24	; 20
  de:	40 e0       	ldi	r20, 0x00	; 0
  e0:	50 e0       	ldi	r21, 0x00	; 0
	int c=0;
	while(1){
	while(c<100)
	{
		PORTC=0b01111110;
  e2:	be e7       	ldi	r27, 0x7E	; 126
		PORTB=0b11111111;
  e4:	ff 24       	eor	r15, r15
  e6:	fa 94       	dec	r15
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e8:	60 ea       	ldi	r22, 0xA0	; 160
  ea:	7f e0       	ldi	r23, 0x0F	; 15
		_delay_ms(1);
		PORTC=0b10000001;
  ec:	a1 e8       	ldi	r26, 0x81	; 129
	}
	int d=0;
	while(d<100)
	{
		PORTB=0b01111110;
		PORTC=0b10111101;
  ee:	0d eb       	ldi	r16, 0xBD	; 189
		_delay_ms(1);
		PORTB=0b01000010;
  f0:	12 e4       	ldi	r17, 0x42	; 66
  f2:	c0 e9       	ldi	r28, 0x90	; 144
  f4:	d1 e0       	ldi	r29, 0x01	; 1
  f6:	0c c0       	rjmp	.+24     	; 0x110 <main+0x42>
	DDRC=0b11111111;
	int c=0;
	while(1){
	while(c<100)
	{
		PORTC=0b01111110;
  f8:	b5 bb       	out	0x15, r27	; 21
		PORTB=0b11111111;
  fa:	f8 ba       	out	0x18, r15	; 24
  fc:	cb 01       	movw	r24, r22
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x30>
		_delay_ms(1);
		PORTC=0b10000001;
 102:	a5 bb       	out	0x15, r26	; 21
		PORTB=0b10000001;
 104:	a8 bb       	out	0x18, r26	; 24
 106:	cb 01       	movw	r24, r22
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <main+0x3a>
		_delay_ms(1);
		c++;
 10c:	4f 5f       	subi	r20, 0xFF	; 255
 10e:	5f 4f       	sbci	r21, 0xFF	; 255
{
	DDRB=0b11111111;
	DDRC=0b11111111;
	int c=0;
	while(1){
	while(c<100)
 110:	44 36       	cpi	r20, 0x64	; 100
 112:	51 05       	cpc	r21, r1
 114:	8c f3       	brlt	.-30     	; 0xf8 <main+0x2a>
 116:	20 e0       	ldi	r18, 0x00	; 0
 118:	30 e0       	ldi	r19, 0x00	; 0
		c++;
	}
	int d=0;
	while(d<100)
	{
		PORTB=0b01111110;
 11a:	b8 bb       	out	0x18, r27	; 24
		PORTC=0b10111101;
 11c:	05 bb       	out	0x15, r16	; 21
 11e:	cb 01       	movw	r24, r22
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <main+0x52>
		_delay_ms(1);
		PORTB=0b01000010;
 124:	18 bb       	out	0x18, r17	; 24
		PORTC=0b10000001;
 126:	a5 bb       	out	0x15, r26	; 21
 128:	cb 01       	movw	r24, r22
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0x5c>
		_delay_ms(1);
		d++;
 12e:	2f 5f       	subi	r18, 0xFF	; 255
 130:	3f 4f       	sbci	r19, 0xFF	; 255
		PORTB=0b10000001;
		_delay_ms(1);
		c++;
	}
	int d=0;
	while(d<100)
 132:	24 36       	cpi	r18, 0x64	; 100
 134:	31 05       	cpc	r19, r1
 136:	89 f7       	brne	.-30     	; 0x11a <main+0x4c>
 138:	80 ed       	ldi	r24, 0xD0	; 208
 13a:	97 e0       	ldi	r25, 0x07	; 7
 13c:	fe 01       	movw	r30, r28
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <main+0x70>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 142:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 144:	d9 f7       	brne	.-10     	; 0x13c <main+0x6e>
 146:	e4 cf       	rjmp	.-56     	; 0x110 <main+0x42>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
