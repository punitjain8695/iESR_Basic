
Matrix_A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000187  00000000  00000000  000001bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ed  00000000  00000000  00000342  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001c3  00000000  00000000  0000042f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000005f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ae  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000078  00000000  00000000  000006c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  0000073a  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e2       	ldi	r30, 0x2C	; 44
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 30       	cpi	r26, 0x00	; 0
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 67 00 	call	0xce	; 0xce <main>
  c6:	0c 94 94 00 	jmp	0x128	; 0x128 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000000ce <main>:
#include<avr/io.h>
#define F_CPU 16000000UL
#include<util/delay.h>
void main()
{
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
	DDRB=0b11111111;
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	87 bb       	out	0x17, r24	; 23
	DDRC=0b11111111;
  d6:	84 bb       	out	0x14, r24	; 20
  d8:	20 e0       	ldi	r18, 0x00	; 0
  da:	30 e0       	ldi	r19, 0x00	; 0
	while(2)
	{
	int i=0;	
	while(i<100)
	{
		PORTB=0b11000011;
  dc:	03 ec       	ldi	r16, 0xC3	; 195
		PORTC=0b10000000;
  de:	10 e8       	ldi	r17, 0x80	; 128
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e0:	40 e2       	ldi	r20, 0x20	; 32
  e2:	5e e4       	ldi	r21, 0x4E	; 78
		_delay_ms(5);
		PORTB=0b01111110;
  e4:	be e7       	ldi	r27, 0x7E	; 126
		PORTC=0b00110011;
  e6:	a3 e3       	ldi	r26, 0x33	; 51
  e8:	60 e9       	ldi	r22, 0x90	; 144
  ea:	71 e0       	ldi	r23, 0x01	; 1
  ec:	0c c0       	rjmp	.+24     	; 0x106 <main+0x38>
	while(2)
	{
	int i=0;	
	while(i<100)
	{
		PORTB=0b11000011;
  ee:	08 bb       	out	0x18, r16	; 24
		PORTC=0b10000000;
  f0:	15 bb       	out	0x15, r17	; 21
  f2:	ca 01       	movw	r24, r20
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <main+0x26>
		_delay_ms(5);
		PORTB=0b01111110;
  f8:	b8 bb       	out	0x18, r27	; 24
		PORTC=0b00110011;
  fa:	a5 bb       	out	0x15, r26	; 21
  fc:	ca 01       	movw	r24, r20
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x30>
		_delay_ms(5);
		i++;
 102:	2f 5f       	subi	r18, 0xFF	; 255
 104:	3f 4f       	sbci	r19, 0xFF	; 255
	DDRB=0b11111111;
	DDRC=0b11111111;
	while(2)
	{
	int i=0;	
	while(i<100)
 106:	24 36       	cpi	r18, 0x64	; 100
 108:	31 05       	cpc	r19, r1
 10a:	8c f3       	brlt	.-30     	; 0xee <main+0x20>
		PORTB=0b01111110;
		PORTC=0b00110011;
		_delay_ms(5);
		i++;
	}
	PORTB=0b00000000;
 10c:	18 ba       	out	0x18, r1	; 24
	PORTC=0b00000000;
 10e:	15 ba       	out	0x15, r1	; 21
	PORTC<<1;
 110:	85 b3       	in	r24, 0x15	; 21
	PORTB<<1;
 112:	88 b3       	in	r24, 0x18	; 24
 114:	80 ed       	ldi	r24, 0xD0	; 208
 116:	97 e0       	ldi	r25, 0x07	; 7
 118:	fb 01       	movw	r30, r22
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <main+0x4c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 11e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 120:	d9 f7       	brne	.-10     	; 0x118 <main+0x4a>
 122:	20 e0       	ldi	r18, 0x00	; 0
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	ef cf       	rjmp	.-34     	; 0x106 <main+0x38>

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
